/*
 * JSP generated by Resin Professional 4.0.36 (built Fri, 26 Apr 2013 03:33:09 PDT)
 */

package _jsp;
import javax.servlet.*;
import javax.servlet.jsp.*;
import javax.servlet.http.*;
import java.sql.*;
import java.util.*;
import java.io.*;
import java.text.*;
import java.util.Date;
import CP_Classes.PrelimQuestion;
import CP_Classes.PrelimQuestionAns;

public class _prelimqanswers__jsp extends com.caucho.jsp.JavaPage
{
  private static final java.util.HashMap<String,java.lang.reflect.Method> _jsp_functionMap = new java.util.HashMap<String,java.lang.reflect.Method>();
  private boolean _caucho_isDead;
  private boolean _caucho_isNotModified;
  private com.caucho.jsp.PageManager _jsp_pageManager;
  
  public void
  _jspService(javax.servlet.http.HttpServletRequest request,
              javax.servlet.http.HttpServletResponse response)
    throws java.io.IOException, javax.servlet.ServletException
  {
    javax.servlet.http.HttpSession session = request.getSession(true);
    com.caucho.server.webapp.WebApp _jsp_application = _caucho_getApplication();
    com.caucho.jsp.PageContextImpl pageContext = _jsp_pageManager.allocatePageContext(this, _jsp_application, request, response, null, session, 8192, true, false);

    TagState _jsp_state = null;

    try {
      _jspService(request, response, pageContext, _jsp_application, session, _jsp_state);
    } catch (java.lang.Throwable _jsp_e) {
      pageContext.handlePageException(_jsp_e);
    } finally {
      _jsp_pageManager.freePageContext(pageContext);
    }
  }
  
  private void
  _jspService(javax.servlet.http.HttpServletRequest request,
              javax.servlet.http.HttpServletResponse response,
              com.caucho.jsp.PageContextImpl pageContext,
              javax.servlet.ServletContext application,
              javax.servlet.http.HttpSession session,
              TagState _jsp_state)
    throws Throwable
  {
    javax.servlet.jsp.JspWriter out = pageContext.getOut();
    final javax.el.ELContext _jsp_env = pageContext.getELContext();
    javax.servlet.ServletConfig config = getServletConfig();
    javax.servlet.Servlet page = this;
    javax.servlet.jsp.tagext.JspTag _jsp_parent_tag = null;
    com.caucho.jsp.PageContextImpl _jsp_parentContext = pageContext;
    response.setContentType("text/html; charset=UTF-8");

    out.write(_jsp_string0, 0, _jsp_string0.length);
    CP_Classes.RatersDataEntry RDE;
    synchronized (pageContext.getSession()) {
      RDE = (CP_Classes.RatersDataEntry) pageContext.getSession().getAttribute("RDE");
      if (RDE == null) {
        RDE = new CP_Classes.RatersDataEntry();
        pageContext.getSession().setAttribute("RDE", RDE);
      }
    }
    out.write(_jsp_string1, 0, _jsp_string1.length);
    CP_Classes.PrelimQuestionController PrelimQController;
    synchronized (pageContext.getSession()) {
      PrelimQController = (CP_Classes.PrelimQuestionController) pageContext.getSession().getAttribute("PrelimQController");
      if (PrelimQController == null) {
        PrelimQController = new CP_Classes.PrelimQuestionController();
        pageContext.getSession().setAttribute("PrelimQController", PrelimQController);
      }
    }
    out.write(_jsp_string2, 0, _jsp_string2.length);
    CP_Classes.Login logchk;
    synchronized (pageContext.getSession()) {
      logchk = (CP_Classes.Login) pageContext.getSession().getAttribute("logchk");
      if (logchk == null) {
        logchk = new CP_Classes.Login();
        pageContext.getSession().setAttribute("logchk", logchk);
      }
    }
    out.write(_jsp_string1, 0, _jsp_string1.length);
    CP_Classes.PrelimQuestionBean PrelimQuestionBean;
    synchronized (pageContext.getSession()) {
      PrelimQuestionBean = (CP_Classes.PrelimQuestionBean) pageContext.getSession().getAttribute("PrelimQuestionBean");
      if (PrelimQuestionBean == null) {
        PrelimQuestionBean = new CP_Classes.PrelimQuestionBean();
        pageContext.getSession().setAttribute("PrelimQuestionBean", PrelimQuestionBean);
      }
    }
    out.write(_jsp_string3, 0, _jsp_string3.length);
    CP_Classes.Questionnaire Questionnaire;
    synchronized (pageContext.getSession()) {
      Questionnaire = (CP_Classes.Questionnaire) pageContext.getSession().getAttribute("Questionnaire");
      if (Questionnaire == null) {
        Questionnaire = new CP_Classes.Questionnaire();
        pageContext.getSession().setAttribute("Questionnaire", Questionnaire);
      }
    }
    out.write(_jsp_string2, 0, _jsp_string2.length);
    CP_Classes.Translate trans;
    synchronized (pageContext.getSession()) {
      trans = (CP_Classes.Translate) pageContext.getSession().getAttribute("trans");
      if (trans == null) {
        trans = new CP_Classes.Translate();
        pageContext.getSession().setAttribute("trans", trans);
      }
    }
    out.write(_jsp_string4, 0, _jsp_string4.length);
    
String username=(String)session.getAttribute("username");

  if (!logchk.isUsable(username)) 
  {
    out.write(_jsp_string5, 0, _jsp_string5.length);
     	}
  
  int surveyID = RDE.getSurveyID();	
  int raterID = RDE.getRaterID();
  int assignmentID = Questionnaire.getAssignmentID();
  SimpleDateFormat PrelimQADate = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");//dd/MM/yyyy
  Date Now = new Date();
  String strDate = PrelimQADate.format(Now);
	    
  Vector<PrelimQuestion> v = PrelimQController.getQuestions(surveyID);

	if(request.getParameter("entry")!=null)
	{
		PrelimQuestionBean.resetAnswerCountList();
		for(int y=0;y<v.size();y++)
		{
			PrelimQuestionBean.addQuestionToAnswerCountList();
		}
	}
	
	if(request.getParameter("save") != null){
		ArrayList<Integer> AL = PrelimQuestionBean.getAnswerCountList();
		for (int u=0;u<v.size();u++){ //iterate through the question list and check for the answers and save them
			PrelimQuestion prelimQn = v.get(u);
			
			int prelimRatingScaleID = PrelimQController.getPrelimRatingID(prelimQn.getPrelimQnId());
			if(prelimRatingScaleID == -1){//not using rating scale
				//get the answers count for this particular question
				for(int z=0;z<AL.get(u);z++)
				{
					//iterate through the number of answers for this question and save them all 
					if(request.getParameter("qid"+prelimQn.getPrelimQnId()+"aid"+z) != null)
					{
						int answerId = Integer.parseInt(request.getParameter("qid"+prelimQn.getPrelimQnId()+"aid"+z));
	
						
						
						String answer = request.getParameter("qid"+prelimQn.getPrelimQnId()+"ans"+z);
						String substring = "";
						String finalans = "";
						int i = answer.length();
						int a = 0;
						int b = 0;
						int j = 0;
						int unidec = 0;
						char indec = ' ';
						String hex = "";
						char c = ' ';
						char firstchar = answer.charAt(0);
						while (b<i){
							if (answer.charAt(b) == '&' && answer.charAt(b+1) == '#'){
								for(a=0;a<10;a++){
									if (answer.charAt(b+a) == ';') {
										substring = answer.substring(b+2, b+a);
										//System.out.println(substring);
										unidec = Integer.parseInt(substring);
										hex = Integer.toHexString(unidec);
										indec = (char) Integer.parseInt(hex, 16);
										//System.out.println(indec);
										finalans = finalans + indec;
										b=b+a+1;
										break;
									}
								}
							}else{
								finalans = finalans + answer.charAt(b);
								b++;
							}					
						}//end of while loop		
					    answer = finalans;
						if(!answer.equals("")){
							if(answerId==0){ //answer is a newly added answer
								//insert the answer into the database
								PrelimQController.saveAnswer(prelimQn.getPrelimQnId(), answer, assignmentID, raterID, strDate);
							    //System.out.println("when in jsp" + answer);  							
							}else{
								//update the answer value into the database
								PrelimQController.updateAnswer(answerId, prelimQn.getPrelimQnId(), answer, assignmentID, raterID, strDate);
							}
						}
					}
					
				}
			} else{//use rating scale
				if(request.getParameter("ratingRadioAns"+prelimQn.getPrelimQnId())!= null){
					String rating = request.getParameter("ratingRadioAns"+prelimQn.getPrelimQnId());
					Vector<PrelimQuestionAns> vp = PrelimQController.getAnswers(prelimQn.getPrelimQnId(), assignmentID, raterID);
					if(vp.size()<1){//answer not chosen yet so need insert new answer
						PrelimQController.saveAnswer(prelimQn.getPrelimQnId(), rating, assignmentID, raterID, strDate);
					}else{//answer chosen before so just update
						PrelimQController.updateAnswer(vp.get(0).getPrelimQnAnsID(), prelimQn.getPrelimQnId(), rating, assignmentID, raterID, strDate);
					}
				}
			}
		}
		
		if(request.getParameter("save").equals("1"))
		{
		
    out.write(_jsp_string6, 0, _jsp_string6.length);
    
		}
		else
		{
		
		}
	}
	
	if(request.getParameter("add") != null){
		int posToAdd = Integer.parseInt(request.getParameter("add"));
		PrelimQuestionBean.addAnswer(posToAdd);
		
	}
	
	if(request.getParameter("finish")!=null){
		for (int u=0;u<v.size();u++){ //iterate through the question list and check for the answers and save them
			PrelimQuestion prelimQn = v.get(u);
			int prelimRatingScaleID = PrelimQController.getPrelimRatingID(prelimQn.getPrelimQnId());
			
			if(prelimRatingScaleID == -1){ //not using rating scale so it doesnt matter, do nothing
		
			}else{ //use rating scale, must check if an answer is chosen
				Vector<PrelimQuestionAns> vAns = PrelimQController.getAnswers(prelimQn.getPrelimQnId(),assignmentID,raterID);
				if(vAns.size() < 1){
					
    out.write(_jsp_string7, 0, _jsp_string7.length);
    out.print((trans.tslt("Please finish all the preliminary questions before moving to the next step.")));
    out.write(_jsp_string8, 0, _jsp_string8.length);
    
				}
			}
		}
		
    out.write(_jsp_string9, 0, _jsp_string9.length);
    out.print((trans.tslt("Proceeding to Questionnaire")));
    out.write(_jsp_string10, 0, _jsp_string10.length);
    		
	}
  
  
    out.write(_jsp_string11, 0, _jsp_string11.length);
    out.print((PrelimQController.getPrelimQnHeader(surveyID)));
    out.write(_jsp_string12, 0, _jsp_string12.length);
    
//iterate through the questions list
for(int i=0;i<v.size();i++){
	//get the prelim question currently in the list
	PrelimQuestion pq = v.get(i);
	
	Vector<PrelimQuestionAns> vp = PrelimQController.getAnswers(pq.getPrelimQnId(), assignmentID, raterID);
	out.println("<div style=\"width:600px\">");
	out.println("<table border=1 bordercolor=\"#3399FF\" width=\"600px\">");
	out.println("<tr>");
	out.println("<td bgcolor=\"#000080\">");
	out.println("<font color=\"white\"  face=\"Verdana\" style=\"font-weight: 700\" size=\"2\">");
	out.println(pq.getQuestion());
	out.println("</font>");
	out.println("</td>");
	out.println("</tr>");
	
	//We need to check if the particular question have a rating scale ID, if have then answer should be listed in bullet points
	//if there is no rating scale ID (-1) then answers should be listed out in text boxes
	int prelimRatingScaleID = PrelimQController.getPrelimRatingID(pq.getPrelimQnId());
	if(prelimRatingScaleID == -1){
		if(vp.size()>0||PrelimQuestionBean.getAnswerCount(i)>0){
			if(vp.size()>PrelimQuestionBean.getAnswerCount(i)){
				PrelimQuestionBean.setAnswerCount(i, vp.size());
			}
			for(int x=0; x<PrelimQuestionBean.getAnswerCount(i);x++){
				out.println("<tr>");
				out.println("<td bgcolor=\"#FFFFCC\">");
				out.println(x+1+") ");
				if(x<vp.size()){ //check if the answer is saved already, retrieve the answer from db
					PrelimQuestionAns pqa = vp.get(x);
					out.println("<input type=\"hidden\" name=qid"+pq.getPrelimQnId()+"aid"+x+" id=qid"+pq.getPrelimQnId()+"aid"+x+" value="+pqa.getPrelimQnAnsID()+" />");
					out.println("<textarea rows=2 cols=65 name=qid"+pq.getPrelimQnId()+"ans"+x+" id=qid"+pq.getPrelimQnId()+"ans"+x+">"+pqa.getAnswer()+"</textarea>");
				}else{			
					out.println("<input type=\"hidden\" name=qid"+pq.getPrelimQnId()+"aid"+x+" id=qid"+pq.getPrelimQnId()+"aid"+x+" value=0 />");
					out.println("<textarea rows=2 cols=65 name=qid"+pq.getPrelimQnId()+"ans"+x+" id=qid"+pq.getPrelimQnId()+"ans"+x+"></textarea>");
				}
				
				out.println("</td>");
				out.println("</tr>");
				
				out.println("<tr>");
				out.println("<td bgcolor=\"#FFFFCC\">");
				out.println("&nbsp;");
				out.println("</td>");
				out.println("</tr>");		
			}
		}else{
			PrelimQuestionBean.addAnswer(i);
			out.println("<tr>");
			out.println("<td bgcolor=\"#FFFFCC\">");
			out.println("1 ) ");
			out.println("<input type=\"hidden\" name=qid"+pq.getPrelimQnId()+"aid0 id=qid"+pq.getPrelimQnId()+"aid0 value=0 />");
			out.println("<textarea rows=2 cols=65 name=qid"+pq.getPrelimQnId()+"ans0 id=qid"+pq.getPrelimQnId()+"ans0></textarea>");
			out.println("</td>");
			out.println("</tr>");
			
			out.println("<tr>");
			out.println("<td bgcolor=\"#FFFFCC\">");
			out.println("&nbsp;");
			out.println("</td>");
			out.println("</tr>");
		}
		
		
		out.println("</table>");
		out.println("</div>");
		out.println("<INPUT type=button value=Add Answer onclick=\"Add(this.form, "+i+")\"/>");
		out.println("<br/>");
		out.println("<br/>");
	}else{ //there is a rating scale
		TreeMap<Integer,String> ratingList = PrelimQController.getAllRating(prelimRatingScaleID);
		if(vp.size()<1){//no answer chosen yet
			for(Map.Entry<Integer, String> value : ratingList.entrySet()){
				String rating = value.getValue();
				out.println("<tr>");
				out.println("<td bgcolor=\"#FFFFCC\">");
				out.println("<input type=radio name=ratingRadioAns"+pq.getPrelimQnId()+" value="+rating.replaceAll(" ","")+">"+rating);
				out.println("</td>");
				out.println("</tr>");
			}
		}else{ //answer chosen before
			String ansBefore = vp.get(0).getAnswer();
			for(Map.Entry<Integer, String> value : ratingList.entrySet()){
				String rating = value.getValue();
				if(ansBefore.equalsIgnoreCase(rating.replaceAll(" ",""))){
					out.println("<tr>");
					out.println("<td bgcolor=\"#FFFFCC\">");
					out.println("<input type=radio name=ratingRadioAns"+pq.getPrelimQnId()+" value="+rating.replaceAll(" ","")+" checked>"+rating);
					out.println("</td>");
					out.println("</tr>");
				}else{
					out.println("<tr>");
					out.println("<td bgcolor=\"#FFFFCC\">");
					out.println("<input type=radio name=ratingRadioAns"+pq.getPrelimQnId()+" value="+rating.replaceAll(" ","")+">"+rating);
					out.println("</td>");
					out.println("</tr>");
				}
			}		
		}
		out.println("</table>");
		out.println("</div>");
		out.println("<br/>");
	}
}


    out.write(_jsp_string13, 0, _jsp_string13.length);
  }

  private com.caucho.make.DependencyContainer _caucho_depends
    = new com.caucho.make.DependencyContainer();

  public java.util.ArrayList<com.caucho.vfs.Dependency> _caucho_getDependList()
  {
    return _caucho_depends.getDependencies();
  }

  public void _caucho_addDepend(com.caucho.vfs.PersistentDependency depend)
  {
    super._caucho_addDepend(depend);
    _caucho_depends.add(depend);
  }

  protected void _caucho_setNeverModified(boolean isNotModified)
  {
    _caucho_isNotModified = true;
  }

  public boolean _caucho_isModified()
  {
    if (_caucho_isDead)
      return true;

    if (_caucho_isNotModified)
      return false;

    if (com.caucho.server.util.CauchoSystem.getVersionId() != -7791540776389363938L)
      return true;

    return _caucho_depends.isModified();
  }

  public long _caucho_lastModified()
  {
    return 0;
  }

  public void destroy()
  {
      _caucho_isDead = true;
      super.destroy();
    TagState tagState;
  }

  public void init(com.caucho.vfs.Path appDir)
    throws javax.servlet.ServletException
  {
    com.caucho.vfs.Path resinHome = com.caucho.server.util.CauchoSystem.getResinHome();
    com.caucho.vfs.MergePath mergePath = new com.caucho.vfs.MergePath();
    mergePath.addMergePath(appDir);
    mergePath.addMergePath(resinHome);
    com.caucho.loader.DynamicClassLoader loader;
    loader = (com.caucho.loader.DynamicClassLoader) getClass().getClassLoader();
    String resourcePath = loader.getResourcePathSpecificFirst();
    mergePath.addClassPath(resourcePath);
    com.caucho.vfs.Depend depend;
    depend = new com.caucho.vfs.Depend(appDir.lookup("PrelimQAnswers.jsp"), -5179068165185500021L, false);
    _caucho_depends.add(depend);
  }

  final static class TagState {

    void release()
    {
    }
  }

  public java.util.HashMap<String,java.lang.reflect.Method> _caucho_getFunctionMap()
  {
    return _jsp_functionMap;
  }

  public void caucho_init(ServletConfig config)
  {
    try {
      com.caucho.server.webapp.WebApp webApp
        = (com.caucho.server.webapp.WebApp) config.getServletContext();
      init(config);
      if (com.caucho.jsp.JspManager.getCheckInterval() >= 0)
        _caucho_depends.setCheckInterval(com.caucho.jsp.JspManager.getCheckInterval());
      _jsp_pageManager = webApp.getJspApplicationContext().getPageManager();
      com.caucho.jsp.TaglibManager manager = webApp.getJspApplicationContext().getTaglibManager();
      com.caucho.jsp.PageContextImpl pageContext = new com.caucho.jsp.InitPageContextImpl(webApp, this);
    } catch (Exception e) {
      throw com.caucho.config.ConfigException.create(e);
    }
  }

  private final static char []_jsp_string12;
  private final static char []_jsp_string8;
  private final static char []_jsp_string11;
  private final static char []_jsp_string6;
  private final static char []_jsp_string9;
  private final static char []_jsp_string0;
  private final static char []_jsp_string4;
  private final static char []_jsp_string13;
  private final static char []_jsp_string10;
  private final static char []_jsp_string3;
  private final static char []_jsp_string2;
  private final static char []_jsp_string7;
  private final static char []_jsp_string1;
  private final static char []_jsp_string5;
  static {
    _jsp_string12 = "\r\n</font>\r\n</div>\r\n<br/>\r\n\r\n\r\n".toCharArray();
    _jsp_string8 = "\");\r\n					window.location.href = \"PrelimQAnswers.jsp?entry=1\";\r\n					</script>\r\n					".toCharArray();
    _jsp_string11 = "\r\n  \r\n  <form name=\"PrelimQAnswers\" action=\"PrelimQAnswers.jsp\" method=\"post\" accept-charset=\"ISO-8859-1\">\r\n  \r\n  \r\n  <br/>\r\n  <div style=\"width:590px\">\r\n  <font face=\"Verdana\" style=\"font-size:13px\">\r\n".toCharArray();
    _jsp_string6 = "\r\n		<Script>\r\n		alert(\"Saved successfully\")\r\n		location.href='PrelimQAnswers.jsp?entry=1';\r\n		</Script>\r\n		".toCharArray();
    _jsp_string9 = "\r\n		<script language=\"javascript\">\r\n		alert(\"".toCharArray();
    _jsp_string0 = "  \r\n\r\n\r\n<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n".toCharArray();
    _jsp_string4 = "\r\n\r\n\r\n<html>\r\n<head>\r\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n<title>Preliminary Questions</title>\r\n</head>\r\n\r\n<SCRIPT LANGUAGE=JAVASCRIPT>\r\nfunction Add(form, qn){\r\n		form.action=\"PrelimQAnswers.jsp?save=2&add=\"+qn;\r\n		form.method=\"post\";\r\n		form.submit();\r\n}\r\n\r\nfunction Save(form){\r\n		form.action=\"PrelimQAnswers.jsp?save=1\";\r\n		form.method=\"post\";\r\n		form.submit();\r\n}\r\n\r\nfunction Prev(form)\r\n{\r\n	form.action=\"RatersToDoList.jsp\";\r\n	form.method=\"post\";\r\n	form.submit();\r\n}\r\n\r\nfunction Finish(form){\r\n		form.action=\"PrelimQAnswers.jsp?save=2&finish=1\";\r\n		form.method=\"post\";\r\n		form.submit();\r\n}\r\n</Script>\r\n<body>\r\n".toCharArray();
    _jsp_string13 = "\r\n\r\n\r\n\r\n<INPUT type=\"button\" value=\"Prev\" onclick=\"Prev(this.form)\"/> \r\n<INPUT type=\"button\" value=\"Save\" onclick=\"Save(this.form)\"/> \r\n<INPUT type=\"button\" value=\"Finish\" onclick=\"Finish(this.form)\"/> \r\n</form>\r\n</body>\r\n</html>".toCharArray();
    _jsp_string10 = "\");\r\n		window.location.href = \"Questionnaire.jsp\";\r\n		</script>\r\n		".toCharArray();
    _jsp_string3 = "  \r\n".toCharArray();
    _jsp_string2 = "\r\n".toCharArray();
    _jsp_string7 = "\r\n					<script language=\"javascript\">\r\n					alert(\"".toCharArray();
    _jsp_string1 = " \r\n".toCharArray();
    _jsp_string5 = " <font size=\"2\">\r\n   \r\n    	    	<script>\r\n	parent.location.href = \"index.jsp\";\r\n</script>\r\n".toCharArray();
  }
}
