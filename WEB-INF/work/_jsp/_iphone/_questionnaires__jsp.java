/*
 * JSP generated by Resin Professional 4.0.36 (built Fri, 26 Apr 2013 03:33:09 PDT)
 */

package _jsp._iphone;
import javax.servlet.*;
import javax.servlet.jsp.*;
import javax.servlet.http.*;
import java.sql.*;
import java.io.*;
import java.lang.String;
import java.lang.Object;
import java.util.*;
import CP_Classes.PrelimQuestion;
import CP_Classes.vo.votblSurvey;
import CP_Classes.AdditionalQuestion;
import CP_Classes.vo.voCompetency;
import CP_Classes.vo.voKeyBehaviour;
import CP_Classes.vo.voRatingTask;

public class _questionnaires__jsp extends com.caucho.jsp.JavaPage
{
  private static final java.util.HashMap<String,java.lang.reflect.Method> _jsp_functionMap = new java.util.HashMap<String,java.lang.reflect.Method>();
  private boolean _caucho_isDead;
  private boolean _caucho_isNotModified;
  private com.caucho.jsp.PageManager _jsp_pageManager;
  
  public void
  _jspService(javax.servlet.http.HttpServletRequest request,
              javax.servlet.http.HttpServletResponse response)
    throws java.io.IOException, javax.servlet.ServletException
  {
    javax.servlet.http.HttpSession session = request.getSession(true);
    com.caucho.server.webapp.WebApp _jsp_application = _caucho_getApplication();
    com.caucho.jsp.PageContextImpl pageContext = _jsp_pageManager.allocatePageContext(this, _jsp_application, request, response, null, session, 8192, true, false);

    TagState _jsp_state = null;

    try {
      _jspService(request, response, pageContext, _jsp_application, session, _jsp_state);
    } catch (java.lang.Throwable _jsp_e) {
      pageContext.handlePageException(_jsp_e);
    } finally {
      _jsp_pageManager.freePageContext(pageContext);
    }
  }
  
  private void
  _jspService(javax.servlet.http.HttpServletRequest request,
              javax.servlet.http.HttpServletResponse response,
              com.caucho.jsp.PageContextImpl pageContext,
              javax.servlet.ServletContext application,
              javax.servlet.http.HttpSession session,
              TagState _jsp_state)
    throws Throwable
  {
    javax.servlet.jsp.JspWriter out = pageContext.getOut();
    final javax.el.ELContext _jsp_env = pageContext.getELContext();
    javax.servlet.ServletConfig config = getServletConfig();
    javax.servlet.Servlet page = this;
    javax.servlet.jsp.tagext.JspTag _jsp_parent_tag = null;
    com.caucho.jsp.PageContextImpl _jsp_parentContext = pageContext;
    response.setContentType("text/html");
    response.setCharacterEncoding("utf-8");

    out.write(_jsp_string0, 0, _jsp_string0.length);
    CP_Classes.Database Database;
    synchronized (pageContext.getSession()) {
      Database = (CP_Classes.Database) pageContext.getSession().getAttribute("Database");
      if (Database == null) {
        Database = new CP_Classes.Database();
        pageContext.getSession().setAttribute("Database", Database);
      }
    }
    out.write(_jsp_string1, 0, _jsp_string1.length);
    CP_Classes.RatersDataEntry RDE;
    synchronized (pageContext.getSession()) {
      RDE = (CP_Classes.RatersDataEntry) pageContext.getSession().getAttribute("RDE");
      if (RDE == null) {
        RDE = new CP_Classes.RatersDataEntry();
        pageContext.getSession().setAttribute("RDE", RDE);
      }
    }
    out.write(_jsp_string2, 0, _jsp_string2.length);
    CP_Classes.Questionnaire Questionnaire;
    synchronized (pageContext.getSession()) {
      Questionnaire = (CP_Classes.Questionnaire) pageContext.getSession().getAttribute("Questionnaire");
      if (Questionnaire == null) {
        Questionnaire = new CP_Classes.Questionnaire();
        pageContext.getSession().setAttribute("Questionnaire", Questionnaire);
      }
    }
    out.write(_jsp_string1, 0, _jsp_string1.length);
    CP_Classes.SurveyResult SurveyResult;
    synchronized (pageContext.getSession()) {
      SurveyResult = (CP_Classes.SurveyResult) pageContext.getSession().getAttribute("SurveyResult");
      if (SurveyResult == null) {
        SurveyResult = new CP_Classes.SurveyResult();
        pageContext.getSession().setAttribute("SurveyResult", SurveyResult);
      }
    }
    out.write(_jsp_string1, 0, _jsp_string1.length);
    CP_Classes.Login logchk;
    synchronized (pageContext.getSession()) {
      logchk = (CP_Classes.Login) pageContext.getSession().getAttribute("logchk");
      if (logchk == null) {
        logchk = new CP_Classes.Login();
        pageContext.getSession().setAttribute("logchk", logchk);
      }
    }
    out.write(_jsp_string2, 0, _jsp_string2.length);
    CP_Classes.User_Jenty User;
    synchronized (pageContext.getSession()) {
      User = (CP_Classes.User_Jenty) pageContext.getSession().getAttribute("User");
      if (User == null) {
        User = new CP_Classes.User_Jenty();
        pageContext.getSession().setAttribute("User", User);
      }
    }
    out.write(_jsp_string2, 0, _jsp_string2.length);
    CP_Classes.KeyBehaviour KB;
    synchronized (pageContext.getSession()) {
      KB = (CP_Classes.KeyBehaviour) pageContext.getSession().getAttribute("KB");
      if (KB == null) {
        KB = new CP_Classes.KeyBehaviour();
        pageContext.getSession().setAttribute("KB", KB);
      }
    }
    out.write(_jsp_string1, 0, _jsp_string1.length);
    CP_Classes.Translate trans;
    synchronized (pageContext.getSession()) {
      trans = (CP_Classes.Translate) pageContext.getSession().getAttribute("trans");
      if (trans == null) {
        trans = new CP_Classes.Translate();
        pageContext.getSession().setAttribute("trans", trans);
      }
    }
    out.write(_jsp_string1, 0, _jsp_string1.length);
    CP_Classes.AdditionalQuestionController AddQController;
    synchronized (pageContext.getSession()) {
      AddQController = (CP_Classes.AdditionalQuestionController) pageContext.getSession().getAttribute("AddQController");
      if (AddQController == null) {
        AddQController = new CP_Classes.AdditionalQuestionController();
        pageContext.getSession().setAttribute("AddQController", AddQController);
      }
    }
    out.write(_jsp_string1, 0, _jsp_string1.length);
    CP_Classes.Create_Edit_Survey CE_Survey;
    synchronized (pageContext.getSession()) {
      CE_Survey = (CP_Classes.Create_Edit_Survey) pageContext.getSession().getAttribute("CE_Survey");
      if (CE_Survey == null) {
        CE_Survey = new CP_Classes.Create_Edit_Survey();
        pageContext.getSession().setAttribute("CE_Survey", CE_Survey);
      }
    }
    out.write(_jsp_string1, 0, _jsp_string1.length);
    CP_Classes.PrelimQuestionController PrelimQController;
    synchronized (pageContext.getSession()) {
      PrelimQController = (CP_Classes.PrelimQuestionController) pageContext.getSession().getAttribute("PrelimQController");
      if (PrelimQController == null) {
        PrelimQController = new CP_Classes.PrelimQuestionController();
        pageContext.getSession().setAttribute("PrelimQController", PrelimQController);
      }
    }
    out.write(_jsp_string3, 0, _jsp_string3.length);
    
	String username=(String)session.getAttribute("username");

	if (!logchk.isUsable(username)) 
	{

    out.write(_jsp_string4, 0, _jsp_string4.length);
      
	} 

	int pkUser = logchk.getPKUser();
	int userType = logchk.getUserType();
	int compID = logchk.getCompany();
	int orgID = logchk.getOrg();
	
	String radiobuttonID = "";
	String radiobuttonName = "";
	boolean internalfirstLoop = true;
	boolean internalfirstLoopForComment = true;
	String commentID = "";
	
	//---get survey, target and rater ID.
	int surveyID = RDE.getSurveyID();		
	int targetLoginID = RDE.getTargetID();
	int raterLoginID = RDE.getRaterID();
	
	
	//---beans which are set from Questionnaire.jsp
	int start = Questionnaire.getStartID();
	int assignmentID = Questionnaire.getAssignmentID();
	String name = Questionnaire.getName();
	String jobPost = Questionnaire.getJobPost();
	String timeFrame = Questionnaire.getTimeFrame();
	String futureJob = Questionnaire.getFutureJob();
	//add by Denise 14/12/2009 
	boolean hideNAOption = Questionnaire.getHideNAOption(surveyID);
	
	if(futureJob == null)
		futureJob = "";
	if(timeFrame == null)
		timeFrame = "";

	int RSID[] = Questionnaire.getSurveyRatingScale(surveyID); //RatingScale ID
	int RTID[] = Questionnaire.getRT();
	//int RSID[] = Questionnaire.getRS();
	
	//---check if comment needs to be included
	int included = Questionnaire.commentIncluded(surveyID);
	int selfIncluded = Questionnaire.SelfCommentIncluded(surveyID);
	
	
	//---check if it is self
	String rCode = SurveyResult.RaterCode(assignmentID);
	
	
	//---query database in Questionnaire.java
	int surveyLevel = Questionnaire.getSurveyLevel();
	String [] UserInfo = User.getUserDetail(pkUser);

	int pk = Questionnaire.getCurrID();	
	
	
	String surveyName = Questionnaire.getSurveyInfo(surveyID); //get surveyName
		
	String raterName = Questionnaire.UserName(orgID, raterLoginID);

	int totalRatingTask = Questionnaire.getTotalSurveyRating(surveyID); // count total number of rating task.
	int totalAll = 0;
	
	if(surveyLevel == 0)
		totalAll = Questionnaire.TotalList(surveyID, 0);
	else
		totalAll = Questionnaire.TotalList(surveyID, 1);

	
	if(request.getParameter("finishall") != null) {

		String temp = surveyName + "(S); " + name + "(T); " + raterName + "(R); Complete";
		
		Vector<AdditionalQuestion> v = AddQController.getQuestions(surveyID);
		if(v.size()>0)
		{
			
    out.write(_jsp_string5, 0, _jsp_string5.length);
     
		}
		else
		{
		Questionnaire.SetRaterStatus(assignmentID, 1);

    out.write(_jsp_string6, 0, _jsp_string6.length);
    out.print((trans.tslt("Thank you for your participation")));
    out.write(_jsp_string7, 0, _jsp_string7.length);
    }
	}
	//---get the list of competency assigned to the survey.
	int iPKComp = 0;
	int iPKKB = 0;
	// by Hemilda Date 13/08/2008 add compentecy name
	String sCompName="";
	String sCompDef = "";
	String sKBDef = "";
	Vector vKBList = new Vector();
	int totalCurrComp = Questionnaire.getTotalCurrComp();	// to mantain the total current competency
	int totalComp = Questionnaire.getTotalComp();

	int totalCompleted = Questionnaire.TotalResult(assignmentID);
	
	int complete = 0;
	if(totalCompleted == (totalAll * totalRatingTask))
		complete = 1;

	Vector vComp = Questionnaire.getCompetency(surveyID);
	voCompetency voComp = new voCompetency();
		
	if(vComp.size() > 0)
		voComp = (voCompetency)vComp.elementAt(0);
	
	if (voComp != null) {
		iPKComp = voComp.getCompetencyID();
		sCompDef = voComp.getCompetencyDefinition();
		sCompName = voComp.getCompetencyName();
		if(surveyLevel == 0)
			vKBList = KB.getKBList(iPKComp, 0, compID, orgID);
		else 
			vKBList = Questionnaire.getKBSurvey(surveyID, iPKComp);
	}
	else 
	{

    out.write(_jsp_string8, 0, _jsp_string8.length);
    
	}
	
	if(totalCurrComp == 0) {
		Questionnaire.setCurrID(iPKComp);
	}
	
	if(totalCurrComp == 0 && start == 1) {
		Questionnaire.setStartID(0);
		int total = Questionnaire.TotalResult(assignmentID, iPKComp);
		
		int counter = 1;
		int totalRating = 0;
		
		if(surveyLevel == 1)
			totalRating = vKBList.size() * totalRatingTask;
		else 
			totalRating = totalRatingTask;
		
		while(total == totalRating && counter < totalComp && counter < vComp.size()){
			voComp = (voCompetency)vComp.elementAt(counter);
			
			totalCurrComp++;
			iPKComp = voComp.getCompetencyID();
			sCompDef = voComp.getCompetencyDefinition();
			sCompName = voComp.getCompetencyName();
			Questionnaire.setCurrID(iPKComp);
							
			if(surveyLevel == 0)
				vKBList = KB.getKBList(iPKComp, 0, compID, orgID);
			else 
				vKBList = Questionnaire.getKBSurvey(surveyID, iPKComp);
				
			Questionnaire.setTotalCurrComp(totalCurrComp);	
			
			total = Questionnaire.TotalResult(assignmentID, iPKComp);
			
			if(surveyLevel == 1)
				totalRating = vKBList.size() * totalRatingTask;

			counter ++;
		}
	}
		
	if(request.getParameter("go") != null){

		totalCurrComp = Questionnaire.getTotalCurrComp();
		int go = Integer.parseInt(request.getParameter("go"));
	
		pk = Questionnaire.getCurrID();
		
		int arrPK[] = new int[1];
	    
	    if(surveyLevel == 1) {
			vKBList = Questionnaire.getKBSurvey(surveyID, pk);
			arrPK = new int[vKBList.size()];
			
			for(int i=0; i<vKBList.size(); i++) {
				voKeyBehaviour voKB = (voKeyBehaviour)vKBList.elementAt(i);
				arrPK[i] = voKB.getKeyBehaviourID();
			}
		} else {
			arrPK[0] = pk;
		}	
	
		if( (go == 1 && totalCurrComp < totalComp) || (go == 2 && totalCurrComp >= 0) || go == 3 ) {
		
			for(int rs=0; rs<totalRatingTask; rs++){
				int RTStatus = Questionnaire.RTSetupStatus(RTID[rs], surveyID);
				
				if(RTStatus != 0){
					for(int i=0; i<arrPK.length; i++) {
						float oldResult = Questionnaire.CheckOldResultExist(assignmentID, arrPK[i], RTID[rs]);
						
						if(oldResult <= 0) {
							try {
								float score = 0;
								
								if (surveyLevel == 0) 
									score = Questionnaire.RTScore(RTID[rs], surveyID, arrPK[i]);
								 else 
									score = Questionnaire.RTScoreBehv(RTID[rs], surveyID, arrPK[i]);
	
								Questionnaire.addResult(assignmentID, arrPK[i], RTID[rs], score); 
							}catch(SQLException SE) {}
						}
					}
					
				} else {
					for(int i=0; i<arrPK.length; i++) {	
							
						String [] scaleValue = request.getParameterValues("rbtnScale" + "_" + arrPK[i] + "_" + RTID[rs]);
						if(scaleValue != null)
						{
							for(int j=0; j<scaleValue.length; j++) {
								if(scaleValue[j] != null){
									float value = Float.parseFloat(scaleValue[j]);
									float oldResult = Questionnaire.CheckOldResultExist(assignmentID, arrPK[i], RTID[rs]);
									
									//System.out.println("*************************"+oldResult);
									if(oldResult < 0) {
										try {
											Questionnaire.addResult(assignmentID, arrPK[i], RTID[rs], value); //add date
										}catch(SQLException SE) {}
									}								
									else if(oldResult >= 0 && oldResult != value)
										Questionnaire.updateOldResult(assignmentID, arrPK[i], RTID[rs], value);
								}
							}
						} // end if scaleValue is not null				
					} // end for loop				
				}
			}
		
			if((rCode.equals("SELF") && selfIncluded == 1) || !(rCode.equals("SELF"))&&included == 1)
			{
			    for(int i=0; i<arrPK.length; i++) {	

					int competency = arrPK[0];
					int keybehaviour = 0;
					
					if(surveyLevel == 1) {
						competency = Questionnaire.CompetencyID(arrPK[i]);
						keybehaviour = arrPK[i];
					}
					
					String commentName = "comments" + competency + keybehaviour;
					if(request.getParameter(commentName) != null) {
						
						String value = request.getParameter(commentName);
						//System.out.println(pk+ "======" + value);

						value = value.trim();
                        //Removed by DeZ, 16.07.08, Fixed problem where Import Questionaires gives blank narrative comments even though data is available
						//value = Database.SQLFixer(value);
							
						String oldResult = Questionnaire.checkCommentExist(assignmentID, competency, keybehaviour);
						if(oldResult == null) {
							//System.out.println("OK");
							try {
								Questionnaire.addComment(assignmentID, competency, keybehaviour, value); 
							}catch(SQLException SE) {}
						}								
						else if(oldResult != null && !oldResult.equals(value)) {
							Questionnaire.updateComment(assignmentID, competency, keybehaviour, value);
							//System.out.println("OK2");

						}
					}
				}
			}
		
		}
		
		//go == 1 is next and go == 2 is prev
		
		if(go == 2 && (totalCurrComp-1) >= 0 )  {
			totalCurrComp--; 
		} else if(go == 1 && (totalCurrComp+1) < totalComp) {
			totalCurrComp++;
		}
		
		if(go == 1 || go == 2) {		
			Questionnaire.setTotalCurrComp(totalCurrComp);			
			
			
			if(totalCurrComp >= 0 && totalCurrComp < totalComp && totalCurrComp < vComp.size()) 
			{
				voComp = (voCompetency)vComp.elementAt(totalCurrComp);
				iPKComp = voComp.getCompetencyID();
				sCompDef = voComp.getCompetencyDefinition();
				sCompName = voComp.getCompetencyName();
				Questionnaire.setCurrID(iPKComp);
				//System.out.println("-----------------------------"+totalCurrComp +"-----------------------------"+iPKComp);
		
				if(surveyLevel == 0)
					vKBList = KB.getKBList(iPKComp, 0, compID, orgID);
				else 
					vKBList = Questionnaire.getKBSurvey(surveyID, iPKComp);
	
				}
		}
		
		
		if(request.getParameter("finish") != null) {
			/*************if finish == 3 which indicates exit*******************************/
			if(Integer.parseInt(request.getParameter("finish")) == 3) {
				String temp = surveyName + "(S); " + name + "(T); " + raterName + "(R); Incomplete";
				/*try{
					EV.addRecord("Exit", "Questionnaire", temp, UserInfo[2], UserInfo[11], UserInfo[10]);
				}catch(SQLException SE) {}*/
				
				
    out.write(_jsp_string9, 0, _jsp_string9.length);
    
			}
			
			/*************if finish == 2 which indicates finish the questionnaire*******************************/
			
			if(Integer.parseInt(request.getParameter("finish")) == 2) { 
				totalCompleted = Questionnaire.TotalResult(assignmentID);
				
				if(totalCompleted == (totalAll * totalRatingTask)) {
					int commentIncluded = Questionnaire.commentIncluded(surveyID);
						
					int commentInput = 1;
					
					if(targetLoginID == raterLoginID)
						commentIncluded = Questionnaire.SelfCommentIncluded(surveyID);
					
					if(commentIncluded == 1)
						commentInput = Questionnaire.checkCommentInput(assignmentID);
						
					Vector<AdditionalQuestion> v = AddQController.getQuestions(surveyID);
					if(commentInput == 0) {
						if(v.size()>0)
						{
							
    out.write(_jsp_string10, 0, _jsp_string10.length);
    out.print((trans.tslt("No comments included. Do you want to continue")));
    out.write(_jsp_string11, 0, _jsp_string11.length);
    		
						}
						else
						{
						
    out.write(_jsp_string12, 0, _jsp_string12.length);
    out.print((trans.tslt("No comments included. Do you want to finish")));
    out.write(_jsp_string13, 0, _jsp_string13.length);
    				
						}
					}else {		
						if(v.size()>0)
						{
							
    out.write(_jsp_string14, 0, _jsp_string14.length);
    		
						}
						else
						{
						
    out.write(_jsp_string15, 0, _jsp_string15.length);
     // Change from "clicked" to click as requested by Ms Ros, Desmond 23 Oct 09 
    out.write(_jsp_string16, 0, _jsp_string16.length);
    out.print((trans.tslt("Once you click on the OK button, no more amendments can be made")));
    out.write(_jsp_string17, 0, _jsp_string17.length);
    		
						}
					}
				} else {
					String temp = surveyName + "(S); " + name + "(T); " + raterName + "(R); Incomplete";
					//EV.addRecord("Finish", "Questionnaire", temp, UserInfo[2], UserInfo[11], UserInfo[10]);
					Questionnaire.setStartID(1);
					
    out.write(_jsp_string18, 0, _jsp_string18.length);
    						
				}
			
			} else {
				if(totalCurrComp >= 0 && totalCurrComp < totalComp && totalCurrComp < vComp.size()) {
					voComp = (voCompetency)vComp.elementAt(totalCurrComp);
					iPKComp = voComp.getCompetencyID();
					sCompDef = voComp.getCompetencyDefinition();
					sCompName = voComp.getCompetencyName();
					Questionnaire.setCurrID(iPKComp);
					
					if(surveyLevel == 0)
						vKBList = KB.getKBList(iPKComp, 0, compID, orgID);
					else 
						vKBList = Questionnaire.getKBSurvey(surveyID, iPKComp);
		
				}
			}
		}
	}	// end request.getParameter("go")


    out.write(_jsp_string19, 0, _jsp_string19.length);
    
if(logchk.getSystemMaintenance()==false) {

    out.write(_jsp_string20, 0, _jsp_string20.length);
    
}else{

    out.write(_jsp_string21, 0, _jsp_string21.length);
    
}

    out.write(_jsp_string22, 0, _jsp_string22.length);
    out.print((trans.tslt("Target Name")));
    out.write(_jsp_string23, 0, _jsp_string23.length);
    out.print((name));
    out.write(_jsp_string24, 0, _jsp_string24.length);
    if (futureJob != ""){
    out.print((trans.tslt("Future Job")));
    out.write(_jsp_string23, 0, _jsp_string23.length);
    out.print((futureJob));
    out.write(_jsp_string25, 0, _jsp_string25.length);
    }
    out.write(_jsp_string1, 0, _jsp_string1.length);
    out.print((trans.tslt("Job Position")));
    out.write(_jsp_string23, 0, _jsp_string23.length);
    out.print((jobPost));
    out.write(_jsp_string24, 0, _jsp_string24.length);
    if (timeFrame!= ""){
    out.print((trans.tslt("Time Frame")));
    out.write(_jsp_string23, 0, _jsp_string23.length);
    out.print((timeFrame));
    out.write(_jsp_string25, 0, _jsp_string25.length);
    }
    out.write(_jsp_string1, 0, _jsp_string1.length);
    out.print((trans.tslt("Competency Name")));
    out.write(_jsp_string23, 0, _jsp_string23.length);
    out.print((sCompName));
    out.write(_jsp_string26, 0, _jsp_string26.length);
    
	int[] arrID = new int[1];

    out.write(_jsp_string1, 0, _jsp_string1.length);
    if((sCompDef.length()>0 && !sCompDef.equalsIgnoreCase("")) || surveyLevel == 0){
    out.write(_jsp_string27, 0, _jsp_string27.length);
    if(sCompDef.length()>0 && !sCompDef.equalsIgnoreCase("")){
		/*
	     *Change(s): added check on the HideCompDesc before printing the competency description
	     *Reason(s): To allow toggling of the competency description
	     *Updated By: Liu Taichen
	     *Updated On: 12/07/2012
	     */
		votblSurvey voSurvey = CE_Survey.getSurveyDetail(surveyID);
		if(voSurvey.getHideCompDesc() == 0){
	
	
    out.write(_jsp_string28, 0, _jsp_string28.length);
    out.print((trans.tslt("Competency Description")));
    out.write(_jsp_string29, 0, _jsp_string29.length);
    out.print((sCompDef));
    out.write(_jsp_string30, 0, _jsp_string30.length);
    }
	}
    out.write(_jsp_string31, 0, _jsp_string31.length);
    
	if(surveyLevel == 0){
		arrID[0] = Questionnaire.getCurrID();
		if(CE_Survey.getHideKBDesc(surveyID)==0){
	
    out.write(_jsp_string32, 0, _jsp_string32.length);
    out.print((trans.tslt("Key Behaviours")));
    out.write(_jsp_string33, 0, _jsp_string33.length);
    for(int i=0; i<vKBList.size(); i++) {
			voKeyBehaviour voKB = (voKeyBehaviour)vKBList.elementAt(i);
			sKBDef = voKB.getKeyBehaviour();
		
    out.write(_jsp_string34, 0, _jsp_string34.length);
    out.print((sKBDef));
    out.write(_jsp_string35, 0, _jsp_string35.length);
    }
    out.write(_jsp_string36, 0, _jsp_string36.length);
      }
    }//end if surveyLevel==0
    out.write(_jsp_string37, 0, _jsp_string37.length);
    } //end if sCompDef after fieldset
    out.write(_jsp_string1, 0, _jsp_string1.length);
    
if(surveyLevel != 0){
	arrID = new int[vKBList.size()];
	for(int i=0; i<vKBList.size(); i++) {
	
		voKeyBehaviour voKB = (voKeyBehaviour)vKBList.elementAt(i);
		iPKKB = voKB.getKeyBehaviourID();
		sKBDef = voKB.getKeyBehaviour();
		arrID[i] = iPKKB;
	}
}

    out.write(_jsp_string38, 0, _jsp_string38.length);
    
for(int i=0; i<arrID.length; i++) {
	int ID = 0;

	if(surveyLevel == 0) {
		ID = arrID[i];
	}else if(surveyLevel == 1){

    out.write(_jsp_string39, 0, _jsp_string39.length);
    
		voKeyBehaviour voKB = (voKeyBehaviour)vKBList.elementAt(i);
		ID = voKB.getKeyBehaviourID();
		sKBDef = voKB.getKeyBehaviour();
			
		if(Questionnaire.hasCompleted(assignmentID, ID, RTID.length)) {

    out.write(_jsp_string40, 0, _jsp_string40.length);
    out.print((i+1));
    out.write(_jsp_string41, 0, _jsp_string41.length);
    out.print((sKBDef));
    out.write(_jsp_string42, 0, _jsp_string42.length);
    }else{
    out.write(_jsp_string43, 0, _jsp_string43.length);
    out.print((i+1));
    out.write(_jsp_string41, 0, _jsp_string41.length);
    out.print((sKBDef));
    out.write(_jsp_string42, 0, _jsp_string42.length);
    }
	    }
    out.write(_jsp_string44, 0, _jsp_string44.length);
    			
		    //Rating Scale ID For-Loop
		    for(int k=0; k<RSID.length; k++) {
		
		        if(RSID[k] == -1) 
		            break;
		
		        float oldRS = 0;
		
		        Vector vRatingTask = Questionnaire.getSurveyRatingTask(surveyID, RSID[k]);
		
		        int iRTID = 0;
		        String sRTName = "";
		        String sRTCode;
		        String colours [] = {"#FFFFCC", "#CCFFCC", "#CCFFCC"};
		
		        int iCount = 0;
		        
		        //Rating Task Vector For-Loop
		        for(int l=0; l<vRatingTask.size(); l++) {
		            voRatingTask voRT = (voRatingTask)vRatingTask.elementAt(l);
		            iRTID = voRT.getRatingTaskID();
		            int RTSetup = Questionnaire.RTSetupStatus(iRTID, surveyID);
		
		            if(RTSetup != 2) {
		                iCount++;
		            }
		        }//End of Rating Task Vector For-Loop
				
    out.write(_jsp_string45, 0, _jsp_string45.length);
    
		        Vector vRScale = Questionnaire.getRatingScale(RSID[k]);
		        int totalRS   = Questionnaire.getTotalRS(RSID[k]);
		       
		        int low [] = new int [totalRS];
		        int high [] = new int [totalRS];
		        int lowValue=0, highValue=0;
		        int colspan[] = new int[totalRS];
		        String scaleDesc = "";
		        String sScaleNADesc = "";
		
		        //iCount Check
		        if(iCount != 0) {
		            //Ranking Scale Vector For-Loop
		            for(int j=0; j<vRScale.size(); j++) {	
		                String [] sRS = sRS = new String[3];
		                sRS = (String[])vRScale.elementAt(j);
		                int value = Integer.parseInt(sRS[0]);
		                
		                //Denise 17/12/2009 to hide the 0 value if required
		                if (value==0 && hideNAOption) value ++;
		                low[lowValue] = value; 
		                high[highValue] = Integer.parseInt(sRS[1]);
		                scaleDesc = sRS[2];
		
		                colspan[lowValue] = high[highValue] - low[lowValue] + 1;
		    	
		               //edit by Denise 17/12/2009 	to hide the NA value. change equals to equalsIgnoreCase
		               if(hideNAOption && (scaleDesc.equalsIgnoreCase("NA") || scaleDesc.equalsIgnoreCase("N/A") || scaleDesc.equals("Not applicable")
		              					|| scaleDesc.contains("NA") || scaleDesc.contains("N/A")|| scaleDesc.contains("Not applicable") ||scaleDesc.contains("Not Applicable")||(high[highValue]==0))) {                 					 
		                     totalRS --;
		                } else { 
				
    out.write(_jsp_string46, 0, _jsp_string46.length);
    out.print((colspan[lowValue]));
    out.write(_jsp_string47, 0, _jsp_string47.length);
    out.print((scaleDesc));
    out.write(_jsp_string48, 0, _jsp_string48.length);
    					
		                lowValue++;
		                highValue++;
		               }
		            } //End of Ranking Scale Vector For-Loop
		        } //End of iCount Check
		
    out.write(_jsp_string49, 0, _jsp_string49.length);
    
		        //Rating Task Vector For-Loop
		        for(int l=0; l<vRatingTask.size(); l++) {
		            voRatingTask voRT = (voRatingTask)vRatingTask.elementAt(l);
		
		            iRTID = voRT.getRatingTaskID();
		            sRTName = voRT.getRatingTaskName();
		            sRTCode = voRT.getRatingCode();
		
		            /************************** CHECK EITHER TO SHOW OR HIDE RATING TASK *********************************************/
		            int RTSetup = Questionnaire.RTSetupStatus(iRTID, surveyID);
		            
		            //Rating Task Setup Not 2 Check
		            if(RTSetup != 2) {
		
		            oldRS = Questionnaire.CheckOldResultExist(assignmentID, ID, iRTID);
		            
		            // Updated descriptors displayed when mouse-over Rating Task Code (i.e. CP or CPR) in Questionnaire to include a simple description, Desmond 11 August 2010
		            String descriptor = sRTName;
		            
		            if( sRTCode.equalsIgnoreCase("CPR") ) {
		            	descriptor += " - Level of performance expected of the Target";
		            } else if( sRTCode.equalsIgnoreCase("CP") ) {
		            	descriptor += " - Actual level of performance of the Target now";
		            } else {
		            	// Just use Rating Task Name, so don't do anything here
		            }
		
    out.write(_jsp_string50, 0, _jsp_string50.length);
    out.print((descriptor));
    out.write(_jsp_string51, 0, _jsp_string51.length);
    out.print((sRTCode));
    out.write(_jsp_string52, 0, _jsp_string52.length);
    
			int j=0;
			
			int totalValue = 0;
			//Denise 17/12/2009 to find the number of rating value
			for (int x=0; x<totalRS; x++){
				totalValue += (high[x] -low[x]+1);
			}
			while(j < totalRS) {
				lowValue = low[j];
				highValue = high[j];
				
				while(lowValue <= highValue) {
					if (internalfirstLoop != true) {
						radiobuttonName = radiobuttonName + "," + Integer.toString(ID) + "_" + Integer.toString(iRTID);
						radiobuttonID = radiobuttonID + "," + Integer.toString(ID) + "_" + Integer.toString(iRTID) + "_" + Integer.toString(lowValue);
					} else {
						radiobuttonName = Integer.toString(ID) + "_" + Integer.toString(iRTID);
						radiobuttonID = Integer.toString(ID) + "_" + Integer.toString(iRTID) + "_" + Integer.toString(lowValue);
						internalfirstLoop = false;
					}//change to adjust the size of the rating value
		
    out.write(_jsp_string53, 0, _jsp_string53.length);
    out.print((100/(totalValue+1)));
    out.write(_jsp_string54, 0, _jsp_string54.length);
    out.print((colours[l]));
    out.write(_jsp_string55, 0, _jsp_string55.length);
    		
				if(RTSetup == 1)
					oldRS = (int)Questionnaire.RTScore(iRTID, surveyID, iPKComp);
				
				if(oldRS >= 0 && oldRS == lowValue) {
					if(RTSetup == 1) {
		
    out.write(_jsp_string56, 0, _jsp_string56.length);
    out.print(("rbtnScale"+ "_" + ID + "_" + iRTID + "_" + lowValue));
    out.write(_jsp_string57, 0, _jsp_string57.length);
    out.print(("rbtnScale"+ "_" + ID + "_" + iRTID));
    out.write(_jsp_string58, 0, _jsp_string58.length);
    out.print((lowValue));
    out.write(_jsp_string59, 0, _jsp_string59.length);
    		
					} else {
		
    out.write(_jsp_string60, 0, _jsp_string60.length);
    out.print(("rbtnScale"+ "_" + ID + "_" + iRTID + "_" + lowValue));
    out.write(_jsp_string57, 0, _jsp_string57.length);
    out.print(("rbtnScale"+ "_" + ID + "_" + iRTID));
    out.write(_jsp_string58, 0, _jsp_string58.length);
    out.print((lowValue));
    out.write(_jsp_string61, 0, _jsp_string61.length);
    		
					}
				} else {
					if(RTSetup == 1) {
		
    out.write(_jsp_string60, 0, _jsp_string60.length);
    out.print(("rbtnScale"+ "_" + ID + "_" + iRTID + "_" + lowValue));
    out.write(_jsp_string57, 0, _jsp_string57.length);
    out.print(("rbtnScale"+ "_" + ID + "_" + iRTID));
    out.write(_jsp_string58, 0, _jsp_string58.length);
    out.print((lowValue));
    out.write(_jsp_string62, 0, _jsp_string62.length);
    		
					} else {
		
    out.write(_jsp_string63, 0, _jsp_string63.length);
    out.print(("rbtnScale"+ "_" + ID + "_" + iRTID + "_" + lowValue));
    out.write(_jsp_string57, 0, _jsp_string57.length);
    out.print(("rbtnScale"+ "_" + ID + "_" + iRTID));
    out.write(_jsp_string58, 0, _jsp_string58.length);
    out.print((lowValue));
    out.write(_jsp_string64, 0, _jsp_string64.length);
     		
					}
				} 
				if(lowValue == 0) {
		
    out.write(_jsp_string65, 0, _jsp_string65.length);
    out.print(("N/A"));
    out.write(_jsp_string66, 0, _jsp_string66.length);
    			
		}		else {
		
    out.write(_jsp_string65, 0, _jsp_string65.length);
    out.print((lowValue));
    out.write(_jsp_string67, 0, _jsp_string67.length);
     	
				} 
		
    out.write(_jsp_string68, 0, _jsp_string68.length);
    				
				lowValue++;
			} ; //end do while
			j++;
		} //End of While-Loop
		
    out.write(_jsp_string69, 0, _jsp_string69.length);
    
		} //End of Rating Task Setup Not 2 Check
		} //Rating Task Vector For-Loop
		
    out.write(_jsp_string70, 0, _jsp_string70.length);
     
		} //End of Rating Scale ID For-Loop
		
    out.write(_jsp_string66, 0, _jsp_string66.length);
    	
		if ((rCode.equals("SELF") && selfIncluded == 1) || !(rCode.equals("SELF"))&&included == 1){
		
    out.write(_jsp_string71, 0, _jsp_string71.length);
    out.print((trans.tslt("Narrative Comments")));
    out.write(_jsp_string72, 0, _jsp_string72.length);
    
				int competency = iPKComp;
				int keybehaviour = 0;
			
				if(surveyLevel == 1) {
					keybehaviour = ID;
				}
	
				//System.out.println("comment : " + assignmentID + ", " + competency + ", " + keybehaviour);
				String oldComment = Questionnaire.checkCommentExist(assignmentID, competency, keybehaviour);
				String commentName = "comments" + competency + keybehaviour;
				
				if(oldComment == null)
					oldComment = "";
				
				if (internalfirstLoopForComment != true) {
					commentID = commentID + "," + commentName;
				} else {
					commentID = commentName;
					internalfirstLoopForComment = false;
				}
			
    out.write(_jsp_string73, 0, _jsp_string73.length);
    out.print((commentName));
    out.write(_jsp_string74, 0, _jsp_string74.length);
    out.print((oldComment));
    out.write(_jsp_string75, 0, _jsp_string75.length);
    }
    out.write(_jsp_string76, 0, _jsp_string76.length);
    }
    out.write(_jsp_string77, 0, _jsp_string77.length);
    out.print((complete));
    out.write(_jsp_string78, 0, _jsp_string78.length);
    out.print(( radiobuttonName));
    out.write(_jsp_string79, 0, _jsp_string79.length);
    out.print(( radiobuttonID));
    out.write(_jsp_string80, 0, _jsp_string80.length);
    out.print(( commentID));
    out.write(_jsp_string81, 0, _jsp_string81.length);
    out.print((totalCurrComp + 1));
    out.write(_jsp_string82, 0, _jsp_string82.length);
    out.print((totalComp));
    out.write(_jsp_string83, 0, _jsp_string83.length);
    
				Vector<PrelimQuestion> v = PrelimQController.getQuestions(RDE.getSurveyID());
				if(v.size() > 0){

    out.write(_jsp_string84, 0, _jsp_string84.length);
    
				}

    out.write(_jsp_string85, 0, _jsp_string85.length);
    
			int total = totalCurrComp;
			if(total == 0) {
		
    out.write(_jsp_string86, 0, _jsp_string86.length);
     			
			} else {
		
    out.write(_jsp_string87, 0, _jsp_string87.length);
     
			} 
			if(total+1 == totalComp) {
		
    out.write(_jsp_string88, 0, _jsp_string88.length);
    
			} else {
		
    out.write(_jsp_string89, 0, _jsp_string89.length);
    
			}
		
    out.write(_jsp_string90, 0, _jsp_string90.length);
  }

  private com.caucho.make.DependencyContainer _caucho_depends
    = new com.caucho.make.DependencyContainer();

  public java.util.ArrayList<com.caucho.vfs.Dependency> _caucho_getDependList()
  {
    return _caucho_depends.getDependencies();
  }

  public void _caucho_addDepend(com.caucho.vfs.PersistentDependency depend)
  {
    super._caucho_addDepend(depend);
    _caucho_depends.add(depend);
  }

  protected void _caucho_setNeverModified(boolean isNotModified)
  {
    _caucho_isNotModified = true;
  }

  public boolean _caucho_isModified()
  {
    if (_caucho_isDead)
      return true;

    if (_caucho_isNotModified)
      return false;

    if (com.caucho.server.util.CauchoSystem.getVersionId() != -7791540776389363938L)
      return true;

    return _caucho_depends.isModified();
  }

  public long _caucho_lastModified()
  {
    return 0;
  }

  public void destroy()
  {
      _caucho_isDead = true;
      super.destroy();
    TagState tagState;
  }

  public void init(com.caucho.vfs.Path appDir)
    throws javax.servlet.ServletException
  {
    com.caucho.vfs.Path resinHome = com.caucho.server.util.CauchoSystem.getResinHome();
    com.caucho.vfs.MergePath mergePath = new com.caucho.vfs.MergePath();
    mergePath.addMergePath(appDir);
    mergePath.addMergePath(resinHome);
    com.caucho.loader.DynamicClassLoader loader;
    loader = (com.caucho.loader.DynamicClassLoader) getClass().getClassLoader();
    String resourcePath = loader.getResourcePathSpecificFirst();
    mergePath.addClassPath(resourcePath);
    com.caucho.vfs.Depend depend;
    depend = new com.caucho.vfs.Depend(appDir.lookup("iphone/Questionnaires.jsp"), 5724518399591446295L, false);
    _caucho_depends.add(depend);
  }

  final static class TagState {

    void release()
    {
    }
  }

  public java.util.HashMap<String,java.lang.reflect.Method> _caucho_getFunctionMap()
  {
    return _jsp_functionMap;
  }

  public void caucho_init(ServletConfig config)
  {
    try {
      com.caucho.server.webapp.WebApp webApp
        = (com.caucho.server.webapp.WebApp) config.getServletContext();
      init(config);
      if (com.caucho.jsp.JspManager.getCheckInterval() >= 0)
        _caucho_depends.setCheckInterval(com.caucho.jsp.JspManager.getCheckInterval());
      _jsp_pageManager = webApp.getJspApplicationContext().getPageManager();
      com.caucho.jsp.TaglibManager manager = webApp.getJspApplicationContext().getTaglibManager();
      com.caucho.jsp.PageContextImpl pageContext = new com.caucho.jsp.InitPageContextImpl(webApp, this);
    } catch (Exception e) {
      throw com.caucho.config.ConfigException.create(e);
    }
  }

  private final static char []_jsp_string46;
  private final static char []_jsp_string54;
  private final static char []_jsp_string13;
  private final static char []_jsp_string81;
  private final static char []_jsp_string59;
  private final static char []_jsp_string77;
  private final static char []_jsp_string40;
  private final static char []_jsp_string60;
  private final static char []_jsp_string25;
  private final static char []_jsp_string52;
  private final static char []_jsp_string90;
  private final static char []_jsp_string89;
  private final static char []_jsp_string78;
  private final static char []_jsp_string34;
  private final static char []_jsp_string49;
  private final static char []_jsp_string10;
  private final static char []_jsp_string47;
  private final static char []_jsp_string20;
  private final static char []_jsp_string42;
  private final static char []_jsp_string37;
  private final static char []_jsp_string43;
  private final static char []_jsp_string30;
  private final static char []_jsp_string36;
  private final static char []_jsp_string65;
  private final static char []_jsp_string45;
  private final static char []_jsp_string39;
  private final static char []_jsp_string14;
  private final static char []_jsp_string80;
  private final static char []_jsp_string63;
  private final static char []_jsp_string5;
  private final static char []_jsp_string75;
  private final static char []_jsp_string68;
  private final static char []_jsp_string71;
  private final static char []_jsp_string19;
  private final static char []_jsp_string85;
  private final static char []_jsp_string22;
  private final static char []_jsp_string58;
  private final static char []_jsp_string64;
  private final static char []_jsp_string35;
  private final static char []_jsp_string12;
  private final static char []_jsp_string76;
  private final static char []_jsp_string86;
  private final static char []_jsp_string70;
  private final static char []_jsp_string51;
  private final static char []_jsp_string73;
  private final static char []_jsp_string8;
  private final static char []_jsp_string0;
  private final static char []_jsp_string67;
  private final static char []_jsp_string82;
  private final static char []_jsp_string57;
  private final static char []_jsp_string31;
  private final static char []_jsp_string88;
  private final static char []_jsp_string27;
  private final static char []_jsp_string11;
  private final static char []_jsp_string9;
  private final static char []_jsp_string84;
  private final static char []_jsp_string44;
  private final static char []_jsp_string69;
  private final static char []_jsp_string28;
  private final static char []_jsp_string24;
  private final static char []_jsp_string4;
  private final static char []_jsp_string62;
  private final static char []_jsp_string50;
  private final static char []_jsp_string29;
  private final static char []_jsp_string66;
  private final static char []_jsp_string87;
  private final static char []_jsp_string61;
  private final static char []_jsp_string48;
  private final static char []_jsp_string32;
  private final static char []_jsp_string21;
  private final static char []_jsp_string1;
  private final static char []_jsp_string23;
  private final static char []_jsp_string3;
  private final static char []_jsp_string83;
  private final static char []_jsp_string18;
  private final static char []_jsp_string41;
  private final static char []_jsp_string33;
  private final static char []_jsp_string53;
  private final static char []_jsp_string72;
  private final static char []_jsp_string2;
  private final static char []_jsp_string17;
  private final static char []_jsp_string79;
  private final static char []_jsp_string6;
  private final static char []_jsp_string55;
  private final static char []_jsp_string15;
  private final static char []_jsp_string16;
  private final static char []_jsp_string7;
  private final static char []_jsp_string74;
  private final static char []_jsp_string26;
  private final static char []_jsp_string56;
  private final static char []_jsp_string38;
  static {
    _jsp_string46 = "\r\n		                <td style='height:10px;text-align:center;font-size:12px;' colspan=".toCharArray();
    _jsp_string54 = "% bgcolor=\"".toCharArray();
    _jsp_string13 = "?\"))\r\n								window.location.href = \"Questionnaires.jsp?finishall=1\";\r\n						</script>\r\n						".toCharArray();
    _jsp_string81 = "\">\r\n<table border=\"0\" width=\"100%\" >\r\n	<tr>\r\n		<td style='width:30%;text-align:center'>".toCharArray();
    _jsp_string59 = "\" disabled checked></br>\r\n		".toCharArray();
    _jsp_string77 = "\r\n\r\n<input name=\"totalCompleted\" type=\"hidden\" id=\"totalCompleted\" value=\"".toCharArray();
    _jsp_string40 = "\r\n	    <div class=\"row\">\r\n	    	<table style='border:0px;width:100%;'>\r\n	    		<tr>\r\n	    			<td style='font-weight:bold;text-align:left;'>\r\n	    				<img src=\"../images/RaterCompleted.bmp\">".toCharArray();
    _jsp_string60 = "			\r\n				<input type=\"radio\" id=\"".toCharArray();
    _jsp_string25 = "<br>".toCharArray();
    _jsp_string52 = "</td>				\r\n		".toCharArray();
    _jsp_string90 = "\r\n		</td>\r\n	</tr>\r\n</table>\r\n</form>\r\n</div>\r\n</body>\r\n</html>".toCharArray();
    _jsp_string89 = "\r\n			<input type=button class=\"commonButton\" name=\"btnNext\" value=\"  >  \" onClick=\"javascript:goNext(this.form)\">\r\n		".toCharArray();
    _jsp_string78 = "\">\r\n<input type=\"hidden\" id=\"radiobuttonName\" name=\"radiobuttonName\" value=\"".toCharArray();
    _jsp_string34 = "\r\n         <li>".toCharArray();
    _jsp_string49 = "\r\n		</tr>\r\n		\r\n		".toCharArray();
    _jsp_string10 = "\r\n							<script>\r\n								if(confirm(\"".toCharArray();
    _jsp_string47 = "><b>".toCharArray();
    _jsp_string20 = "\r\n<body>\r\n".toCharArray();
    _jsp_string42 = "\r\n	    			</td>\r\n	    		</tr>\r\n	    	</table>\r\n	    </div>\r\n	    ".toCharArray();
    _jsp_string37 = "\r\n</fieldset>\r\n".toCharArray();
    _jsp_string43 = "\r\n	    <div class=\"row\"> \r\n	         <table style='border:0px;width:100%;'>\r\n	    		<tr>\r\n	    			<td style='font-weight:bold;text-align:left;'>\r\n	    				<img src=\"../images/RaterIncomplete.bmp\">".toCharArray();
    _jsp_string30 = "</textarea>\r\n    </div>\r\n    ".toCharArray();
    _jsp_string36 = "\r\n        </ul>\r\n    </div>\r\n    ".toCharArray();
    _jsp_string65 = "		\r\n				".toCharArray();
    _jsp_string45 = "\r\n		        <table width=\"100%\" border=\"0\"  font style='font-size:10.0pt;font-family:Arial'>\r\n		            <tr align=\"center\" height=\"5\">\r\n		            	<td>&nbsp;</td>\r\n				".toCharArray();
    _jsp_string39 = "\r\n	<fieldset>\r\n".toCharArray();
    _jsp_string14 = "\r\n							<script>\r\n									window.location.href = \"Questionnaires.jsp?finishall=1\";\r\n							</script>\r\n							".toCharArray();
    _jsp_string80 = "\">\r\n<input type=\"hidden\" id=\"commentID\" name=\"commentID\" value=\"".toCharArray();
    _jsp_string63 = "			\r\n				<input type=\"radio\" align = \"center\" id=\"".toCharArray();
    _jsp_string5 = "\r\n			<script language=\"javascript\">\r\n			window.location.href = \"AdditionalAnswers.jsp?entry=1\";\r\n			</script>\r\n			".toCharArray();
    _jsp_string75 = "</textarea>\r\n			".toCharArray();
    _jsp_string68 = "\r\n		</td>\r\n		".toCharArray();
    _jsp_string71 = "\r\n		<p style='text-align:left;font-size:13px;'>".toCharArray();
    _jsp_string19 = "\r\n</head>\r\n".toCharArray();
    _jsp_string85 = "\r\n			<input type=button class=\"commonButton\" value=\"Save\" name=\"btnSave\" onClick=\"confirmFinish(this.form, 1)\">\r\n			<input type=button class=\"commonButton\" value=\"Finish\" name=\"btnFinish\" onClick=\"return confirmFinish(this.form, 2)\">\r\n		</td>\r\n		<td>\r\n		".toCharArray();
    _jsp_string22 = "\r\n<div class=\"toolbar\" style='min-width:420px;'> \r\n	<h1 id=\"pageTitle\"></h1>\r\n	<a title=\"Rater's To Do List\" class=\"backButton\" href=\"#\" onclick=\"window.location.href='RatersToDoList.jsp'\">To Do List</a>\r\n	<a title=\"Log out\" class=\"logoutButton\" href=\"#\" onclick=\"if(!confirm('Please make sure you have saved your ratings. Click \\'OK\\' to log off; Click \\'Cancel\\' to continue your rating.')){return false;};window.location.href='login.jsp?logout=1'\">Exit</a>\r\n</div>\r\n<div id=\"questionnaire\" class=\"panel\" title=\"Questionnaire\" selected='true' style='min-width:420px;'>\r\n<form name = \"Questionnaire\" method=\"post\">\r\n<p style=\"font-size:14px\">\r\n".toCharArray();
    _jsp_string58 = "\" value=\"".toCharArray();
    _jsp_string64 = "\"></br>\r\n		".toCharArray();
    _jsp_string35 = "</li>\r\n    	".toCharArray();
    _jsp_string12 = "\r\n						<script language=\"javascript\">\r\n							if(confirm(\"".toCharArray();
    _jsp_string76 = "\r\n			</div>\r\n    	</fieldset>\r\n".toCharArray();
    _jsp_string86 = "\r\n			<input type=button class=\"commonButton\" name=\"btnPrev\" value=\"  <  \" disabled>\r\n\r\n		".toCharArray();
    _jsp_string70 = "				\r\n		</table>\r\n		<p></p>\r\n		\r\n		".toCharArray();
    _jsp_string51 = "')\" onMouseout=\"hidetip()\">".toCharArray();
    _jsp_string73 = "\r\n				<textarea name=".toCharArray();
    _jsp_string8 = "			\r\n			<script language=\"javascript\">\r\n				window.location.href = \"RatersToDoList.jsp\";\r\n			</script>\r\n".toCharArray();
    _jsp_string0 = "\r\n\r\n\r\n\r\n".toCharArray();
    _jsp_string67 = "	\r\n		".toCharArray();
    _jsp_string82 = " of ".toCharArray();
    _jsp_string57 = "\" name=\"".toCharArray();
    _jsp_string31 = "\r\n    ".toCharArray();
    _jsp_string88 = "\r\n			<input type=button class=\"commonButton\" name=\"btnNext\" value=\"  >  \" disabled>\r\n		".toCharArray();
    _jsp_string27 = "\r\n<fieldset> \r\n	".toCharArray();
    _jsp_string11 = "?\"))\r\n									window.location.href = \"Questionnaires.jsp?finishall=1\";\r\n							</script>\r\n							".toCharArray();
    _jsp_string9 = "\r\n				<script language=\"javascript\">\r\n						window.location.href = \"RatersToDoList.jsp\";\r\n				</script>\r\n				".toCharArray();
    _jsp_string84 = "\r\n					<input type=button class=\"commonButton\" value=\"Back to Prelim Questions\" name=\"btnBackToPrelim\" onClick=\"confirmBackToPrelim(this.form)\">\r\n".toCharArray();
    _jsp_string44 = "\r\n	    \r\n	    <div class=\"row\">\r\n	    	".toCharArray();
    _jsp_string69 = "\r\n		</tr>\r\n		".toCharArray();
    _jsp_string28 = "\r\n    <div class=\"row\" style=\"text-align:left\"> \r\n         ".toCharArray();
    _jsp_string24 = "<br>\r\n".toCharArray();
    _jsp_string4 = " \r\n		<script language=\"javascript\">\r\n			window.location.href = \"index.jsp\";\r\n		</script>\r\n".toCharArray();
    _jsp_string62 = "\" disabled></br>\r\n		".toCharArray();
    _jsp_string50 = "\r\n			<tr align=\"center\">\r\n				<td width =\"60\" bgcolor=\"99CCFF\"><a onMouseOver=\"showtip(this,event,'".toCharArray();
    _jsp_string29 = "<br>\r\n         <textarea name=\"compStatement\" cols=\"82\" rows=\"3\" style='width:100%;height:50px;' readonly>".toCharArray();
    _jsp_string66 = "\r\n		".toCharArray();
    _jsp_string87 = "\r\n			<input type=\"button\" class=\"commonButton\" name=\"btnPrev\" value=\"  <  \" onclick=\"javascript:goPrev(this.form)\">\r\n		".toCharArray();
    _jsp_string61 = "\" checked></br>\r\n		".toCharArray();
    _jsp_string48 = "</b></td>\r\n		".toCharArray();
    _jsp_string32 = "\r\n    <div class=\"row\"> \r\n        ".toCharArray();
    _jsp_string21 = "\r\n<body onload=\"autoSaveMaintenance()\">\r\n".toCharArray();
    _jsp_string1 = "\r\n".toCharArray();
    _jsp_string23 = ":&nbsp;".toCharArray();
    _jsp_string3 = "\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n<html> \r\n<head>\r\n	<link rel=\"apple-touch-icon\" href=\"icon.png\" />\r\n	<link rel=\"shortcut icon\" href=\"icon.png\" /> \r\n	<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /> \r\n	<meta name=\"viewport\" content=\"width=device-width; initial-scale=1.0; maximum-scale=1.0; user-scalable=0;\"/> \r\n	<title>3-Sixty Profiler - Questionnaire - iPhone Version</title> \r\n	<link rel=\"stylesheet\" href=\"iui/iui.css\" type=\"text/css\" /> \r\n	<link rel=\"stylesheet\" href=\"iui/t/default/default-theme.css\"  type=\"text/css\"/> \r\n	<script type=\"application/x-javascript\" src=\"iui/iui.js\"></script>\r\n	<script type=\"application/x-javascript\" src=\"questionnaires.js\"></script>\r\n\r\n	<script language=\"javascript\">\r\n	function autoSave(){\r\n		alert(\"Your session is about to expire. Any Response up to this point of time will be saved by the system. \");\r\n		Questionnaire.action = \"Questionnaires.jsp?go=3&finish=1\";\r\n		Questionnaire.method = \"post\";\r\n		Questionnaire.submit();\r\n		parent.location.href = \"index.jsp\";\r\n	}\r\n\r\n	function autoSaveMaintenance(){\r\n		alert(\"The system will be undergoing maintenance. Your inputs so far will be automatically saved by the system. We are sorry for any inconvenience caused. \");\r\n		Questionnaire.action = \"Questionnaires.jsp?go=3&finish=1\";\r\n		Questionnaire.method = \"post\";\r\n		Questionnaire.submit();\r\n		parent.location.href = \"index.jsp\";\r\n	}\r\n	\r\n	function displayWarning(){\r\n		var answer = confirm('This session will expire in two minutes. Would you like to extend this session?')\r\n		if (answer){\r\n			document.Questionnaire.action = \"Questionnaires.jsp?go=3&finish=1\";\r\n			document.Questionnaire.method = \"post\";\r\n			document.Questionnaire.submit();	\r\n		}\r\n	}//End of displayWarning\r\n	\r\n	function confirmBackToPrelim(form){\r\n		form.action = \"PrelimQAnswers.jsp?entry=1\";\r\n		form.method = \"post\";\r\n		form.submit();\r\n	}\r\n\r\n	setTimeout(\"autoSave()\",29.5*60*1000);\r\n	setTimeout(\"displayWarning()\",27*60*1000);\r\n	</script>\r\n\r\n".toCharArray();
    _jsp_string83 = "</td>\r\n		<td align=\"center\">\r\n".toCharArray();
    _jsp_string18 = "\r\n					<script language=\"javascript\">\r\n					alert(\"You have not completed the questionnaire. Your rating will be saved and you will need to return to provide ratings to the rest of the questions. Your participation is critical to the sucess of this survey.\");\r\n					</script>\r\n					<!----------------------------------------Incomplete Questionnaire------------------------------------------->\r\n					<script language=\"javascript\">\r\n							window.location.href = \"Questionnaire.jsp\";\r\n					</script>\r\n						".toCharArray();
    _jsp_string41 = ". ".toCharArray();
    _jsp_string33 = "<br>\r\n        <ul>\r\n    	".toCharArray();
    _jsp_string53 = "	\r\n				<td width = ".toCharArray();
    _jsp_string72 = ":</p>\r\n		".toCharArray();
    _jsp_string2 = " \r\n".toCharArray();
    _jsp_string17 = ".\"))\r\n								window.location.href = \"Questionnaires.jsp?finishall=1\";\r\n						</script>\r\n						".toCharArray();
    _jsp_string79 = "\">\r\n<input type=\"hidden\" id=\"radiobuttonID\" name=\"radiobuttonID\" value=\"".toCharArray();
    _jsp_string6 = "\r\n<script language=\"javascript\">\r\n	alert(\"".toCharArray();
    _jsp_string55 = "\">\r\n		".toCharArray();
    _jsp_string15 = "\r\n						<script language=\"javascript\">\r\n						".toCharArray();
    _jsp_string16 = "\r\n							if(confirm(\"".toCharArray();
    _jsp_string7 = "\");\r\n</script>\r\n<script language=\"javascript\">\r\n		window.location.href = \"RatersToDoList.jsp\";\r\n</script>\r\n".toCharArray();
    _jsp_string74 = " cols=\"96\" rows=\"5\" style='width:100%;height:80px;' style=\"font-size: 10pt; font-family: Arial\" onKeyUp=\"checkTextAreaSize(this,4000);\">".toCharArray();
    _jsp_string26 = "<br>\r\n</p>\r\n".toCharArray();
    _jsp_string56 = "							\r\n				<input type=\"radio\" id=\"".toCharArray();
    _jsp_string38 = "\r\n\r\n".toCharArray();
  }
}
