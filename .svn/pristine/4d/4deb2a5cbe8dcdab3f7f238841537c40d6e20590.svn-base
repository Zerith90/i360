package CP_Classes.common;

import CP_Classes.OpenOffice;
import CP_Classes.Setting;

import java.text.SimpleDateFormat;
import java.util.Vector;
import java.io.IOException;
import java.util.Date;

import com.sun.star.lang.XComponent;
import com.sun.star.lang.XMultiComponentFactory;
import com.sun.star.sheet.XSpreadsheet;

import CP_Classes.vo.voErrorLog;

/**
 * This class defines the methods to add and store the Error Logs generated by the system.
 * @author Chun Pong
 * Created Date: 26 May 2008
 * Last Updated on: 26 May 2008
 * Last Updated by: Chun Pong
 */
public class ErrorLog {
	private Vector vErrLog = new Vector(); //Vector to store the voErrorLog objects
	
	private Setting ST = new Setting();
	private OpenOffice OO = new OpenOffice();
	
	//Time Stamp Generation
	private Date timeStamp = new Date();
	private SimpleDateFormat dFormat = new SimpleDateFormat("ddMMyyHHmmss");
	private String sTimeStamp = dFormat.format(timeStamp);
	
	//Open Office component
	private XMultiComponentFactory xRemoteServiceManager = null;
	private XComponent xDoc = null;
	private XSpreadsheet xSpreadsheet = null;

	//File Paths
	private String sTemplateURL = "";
	private String sLogFileURL = "";
	
	//Spreadsheet
	private int iStartCol = 0; //The start column index
	private int iEndCol = 4; //The end column index
	private int iStartRow = 1; //The start row index
	   
	/**
	 * Add a new ErrorLog object to the vector
	 * @param sCategory 	   - The error log's Category
	 * @param sCategoryDetails - The error log's Category Details
	 * @param sCause		   - The error log's Cause
	 * @param sRecordContent   - The error log's Record Content
	 */
	public void addError(String sCategory, String sCategoryDetails, String sCause, String sRecordContent) {
		//Create new voErrorLog object
		voErrorLog voErrLog = new voErrorLog();
		
		//Set the parameters for the voErrorLog object
		voErrLog.setCategory(sCategory);
		voErrLog.setCategoryDetails(sCategoryDetails);
		voErrLog.setCause(sCause);
		voErrLog.setRecordContent(sRecordContent);
		
		//Add voErrLog to the vector, vErrLog
		vErrLog.add(voErrLog);
	} //End addError()
	
	/**
	 * Initialise the excel workbook
	 * @param sUsername - The Username of the User whose action generate the log
	 * @throws Exception
	 */
	public void initializeExcel(String sUsername) throws Exception {
		
		//Print log to console
		System.out.println("ErrorLog.java - initializeExcel() - Start Initialisation");
		
		//Generate file paths
		sTemplateURL = "file:///" + ST.getOOReportTemplatePath() + "ErrorLog.xls";
		sLogFileURL = "file:///" + ST.getOOReportPath() + "ErrorLog_" + sUsername + "_" + sTimeStamp + ".xls";
		
		//Print log to console
		System.out.println("ErrorLog.java - initializeExcel() - Opening Template");
			
		//Open Template file
		xRemoteServiceManager = OO.getRemoteServiceManager("uno:socket,host=localhost,port=2002;urp;StarOffice.ServiceManager");		
		xDoc = OO.openDoc(xRemoteServiceManager, sTemplateURL);
		xSpreadsheet = OO.getSheet(xDoc, "Sheet1");
		
		//Print log to console
		System.out.println("ErrorLog.java - initializeExcel() - Create new Error Log file");
		
		//Create a new file using the template(Save as) 
		OO.storeDocComponent(xRemoteServiceManager, xDoc, sLogFileURL);
		OO.closeDoc(xDoc);
		
		//Print log to console
		System.out.println("ErrorLog.java - initializeExcel() - Opening Error Log for editing");
		
		xDoc = OO.openDoc(xRemoteServiceManager, sLogFileURL);
		xSpreadsheet = OO.getSheet(xDoc, "Sheet1");
		
		//Print log to console
		System.out.println("ErrorLog.java - initializeExcel() - End Initialisation");
	} //End initializeExcel()
	
	/**
	 * Initialise the excel workbook
	 * @param sUsername - The Username of the User whose action generate the log
	 * @return The Error Log file path
	 * @throws Exception
	 */
	public String writeErrorLog(String sUsername) throws IOException {
		//Start of Try-Catch
		try {			
			//Print log to console
			System.out.println("ErrorLog.java - writeErrorLog() - Start Write");
			
			//Initial Error Log Excel File
			initializeExcel(sUsername);
			
			//Print log to console
			System.out.println("ErrorLog.java - writeErrorLog() - Setting Font Style");
			//Set Font Style
			OO.setFontType(xSpreadsheet, iStartCol, iEndCol, iStartRow, vErrLog.size(), "Times");
			OO.setFontSize(xSpreadsheet, iStartCol, iEndCol, iStartRow, vErrLog.size(), 12);
			
			//Print log to console
			System.out.println("ErrorLog.java - writeErrorLog() - Prepare To Write Log");
			System.out.println("ErrorLog.java - writeErrorLog() - Total Error:" + vErrLog.size());
			
			//Writing each error message to excel file
			for(int i=0; i<vErrLog.size(); i++) {
				voErrorLog voErr = (voErrorLog)vErrLog.get(i);
				//insertString() para => (<Spreadsheet>, <Cell Value>, <Cell Row>, <Cell Column>)
				OO.insertString(xSpreadsheet, voErr.getCategory(), (i+1), 0);
				OO.insertString(xSpreadsheet, voErr.getCategoryDetails(), (i+1), 1);
				OO.insertString(xSpreadsheet, voErr.getCause(), (i+1), 2);
				OO.insertString(xSpreadsheet, voErr.getRecordContent(), (i+1), 3);
			}
			
			//Print log to console
			System.out.println("ErrorLog.java - writeErrorLog() - Save Error Log");
			
			//Save Error Log
			OO.storeDocComponent(xRemoteServiceManager, xDoc, sLogFileURL);
			OO.closeDoc(xDoc);
			
			//Print log to console
			System.out.println("ErrorLog.java - writeErrorLog() - End Write");
			System.out.println("ErrorLog.java - writeErrorLog() - " + sLogFileURL);
			
			return sLogFileURL.substring(sLogFileURL.indexOf("Report"));
			//return sLogFileURL;
		}
		catch(Exception e) {
			//Print log to console
			System.err.println("ErrorLog.java - Exception - " + e.getMessage());
			return "Exception occurred while writing error log";
		} //End of Try-Catch
	} //End writeErrorLog()
	
	/**
	 * Return true if Error Log is not empty
	 * @return A boolean to indicating if the Error Log is empty
	 */
	public boolean hasError() {
		if(vErrLog.size() > 0)
			return true;
		else
			return false;
	} //End hasError()
	
	public static void main(String [] args) {
/*		ErrorLog log = new ErrorLog(); //New ErrorLog object
		
		//Start Try-Catch
		try {
			//Add 4 Test Error Messages
			log.addError("Error Category 1","Category Details 1","Cause 1","Record Content 1");
			log.addError("Error Category 2","Category Details 2","Cause 2","Record Content 2");
			log.addError("Error Category 3","Category Details 3","Cause 3","Record Content 3");
			log.addError("Error Category 4","Category Details 4","Cause 4","Record Content 4");
			
			//Save Error Log
			log.writeErrorLog("sa");
		} catch (Exception e) {
			//Print log to console
			System.err.println("ErrorLog.java - main() - " + e.getMessage());	
		} //End Try-Catch	
*/	} //End main()
} //End ErrorLog Class
