/*
 * JSP generated by Resin-3.1.8 (built Mon, 17 Nov 2008 12:15:21 PST)
 */

package _jsp;
import javax.servlet.*;
import javax.servlet.jsp.*;
import javax.servlet.http.*;
import java.sql.*;
import java.io.*;
import java.text.DateFormat;
import java.util.*;
import java.util.Date;
import java.text.*;
import java.lang.String;
import CP_Classes.vo.*;
import CP_Classes.SurveyResult;

public class _subgroupreport__jsp extends com.caucho.jsp.JavaPage
{
  private static final java.util.HashMap<String,java.lang.reflect.Method> _jsp_functionMap = new java.util.HashMap<String,java.lang.reflect.Method>();
  private boolean _caucho_isDead;
  
  public void
  _jspService(javax.servlet.http.HttpServletRequest request,
              javax.servlet.http.HttpServletResponse response)
    throws java.io.IOException, javax.servlet.ServletException
  {
    javax.servlet.http.HttpSession session = request.getSession(true);
    com.caucho.server.webapp.WebApp _jsp_application = _caucho_getApplication();
    javax.servlet.ServletContext application = _jsp_application;
    com.caucho.jsp.PageContextImpl pageContext = _jsp_application.getJspApplicationContext().allocatePageContext(this, _jsp_application, request, response, null, session, 8192, true, false);
    javax.servlet.jsp.PageContext _jsp_parentContext = pageContext;
    javax.servlet.jsp.JspWriter out = pageContext.getOut();
    final javax.el.ELContext _jsp_env = pageContext.getELContext();
    javax.servlet.ServletConfig config = getServletConfig();
    javax.servlet.Servlet page = this;
    response.setContentType("text/html");
    response.setCharacterEncoding("UTF-8");
    request.setCharacterEncoding("UTF-8");
    try {
      out.write(_jsp_string0, 0, _jsp_string0.length);
      CP_Classes.Translate trans;
      synchronized (pageContext.getSession()) {
        trans = (CP_Classes.Translate) pageContext.getSession().getAttribute("trans");
        if (trans == null) {
          trans = new CP_Classes.Translate();
          pageContext.getSession().setAttribute("trans", trans);
        }
      }
      out.write(_jsp_string1, 0, _jsp_string1.length);
      CP_Classes.QuestionnaireReport QR;
      synchronized (pageContext.getSession()) {
        QR = (CP_Classes.QuestionnaireReport) pageContext.getSession().getAttribute("QR");
        if (QR == null) {
          QR = new CP_Classes.QuestionnaireReport();
          pageContext.getSession().setAttribute("QR", QR);
        }
      }
      out.write(_jsp_string1, 0, _jsp_string1.length);
      CP_Classes.Setting Setting;
      synchronized (pageContext.getSession()) {
        Setting = (CP_Classes.Setting) pageContext.getSession().getAttribute("Setting");
        if (Setting == null) {
          Setting = new CP_Classes.Setting();
          pageContext.getSession().setAttribute("Setting", Setting);
        }
      }
      out.write(_jsp_string1, 0, _jsp_string1.length);
      CP_Classes.User_Jenty User;
      synchronized (pageContext.getSession()) {
        User = (CP_Classes.User_Jenty) pageContext.getSession().getAttribute("User");
        if (User == null) {
          User = new CP_Classes.User_Jenty();
          pageContext.getSession().setAttribute("User", User);
        }
      }
      out.write(_jsp_string1, 0, _jsp_string1.length);
      CP_Classes.Login logchk;
      synchronized (pageContext.getSession()) {
        logchk = (CP_Classes.Login) pageContext.getSession().getAttribute("logchk");
        if (logchk == null) {
          logchk = new CP_Classes.Login();
          pageContext.getSession().setAttribute("logchk", logchk);
        }
      }
      out.write(_jsp_string1, 0, _jsp_string1.length);
      CP_Classes.GroupReport ExcelGroup;
      synchronized (pageContext.getSession()) {
        ExcelGroup = (CP_Classes.GroupReport) pageContext.getSession().getAttribute("ExcelGroup");
        if (ExcelGroup == null) {
          ExcelGroup = new CP_Classes.GroupReport();
          pageContext.getSession().setAttribute("ExcelGroup", ExcelGroup);
        }
      }
      out.write(_jsp_string2, 0, _jsp_string2.length);
      out.print((request.getParameter("type")));
      out.write(_jsp_string3, 0, _jsp_string3.length);
      out.print((request.getParameter("exGR")));
      out.write(_jsp_string4, 0, _jsp_string4.length);
      out.print((request.getParameter("orgName")));
      out.write(_jsp_string5, 0, _jsp_string5.length);
      out.print((request.getParameter("surveyName")));
      out.write(_jsp_string6, 0, _jsp_string6.length);
      out.print((request.getParameter("surveyID")));
      out.write(_jsp_string7, 0, _jsp_string7.length);
      out.print((request.getParameter("divID")));
      out.write(_jsp_string8, 0, _jsp_string8.length);
      out.print((request.getParameter("deptID")));
      out.write(_jsp_string9, 0, _jsp_string9.length);
      out.print((request.getParameter("groupID")));
      out.write(_jsp_string10, 0, _jsp_string10.length);
      
int OrgID = logchk.getOrg();
int nameSeq = User.NameSequence(OrgID);
int pkUser = logchk.getPKUser();

if (request.getParameter("preview") != null) {

	String [] chkSelect = request.getParameterValues("chkUser");
	
	String grpName = request.getParameter("preview");
	int type = Integer.parseInt(request.getParameter("type"));
	int exGR = Integer.parseInt(request.getParameter("exGR"));
	int surveyID = Integer.parseInt(request.getParameter("surveyID"));
    int divID = Integer.parseInt(request.getParameter("divID"));
    int deptID = Integer.parseInt(request.getParameter("deptID"));
    int groupID = Integer.parseInt(request.getParameter("groupID"));
    Vector DepartmentList = new Vector();
    Vector groupList = new Vector();
    		
	SurveyResult s = new SurveyResult();
	Vector Target = new Vector();
	Date timeStamp = new java.util.Date();
	SimpleDateFormat dFormat = new SimpleDateFormat("ddMMyyHHmmss");
	String temp  =  dFormat.format(timeStamp);
	String file_name = "Group Report("+grpName+")" + temp + ".xls";
	String temp1 = "";
	
		Vector<Integer> deptIDList = new Vector<Integer>();
		Vector<Integer> groupIDList = new Vector<Integer>();
		
		if(divID==0){ //division is all, deptID might be pointing more than one
			if(deptID==0){ //department is all, group ID might be pointing more than one
				deptIDList.add(0);
				if(groupID==0){
					groupIDList.add(0);
				} else{
					String currentGroupName = "";
					groupList = QR.getGroup(QR.getSurveyID(),divID,deptID);
					//get the name of the current selected group
					for(int i = 0; i < groupList.size(); i ++){
						voGroup voGrp = (voGroup) groupList.elementAt(i);
					   	if(voGrp.getPKGroup() == groupID){
						   currentGroupName = voGrp.getGroupName();
						}
					} 
					//get the groupIDs of all the groups with the same name as the current seleceted one
					for(int i = 0; i < groupList.size(); i ++){
						voGroup voGrp = (voGroup) groupList.elementAt(i);
						if(voGrp.getGroupName().equals(currentGroupName)){
							groupIDList.add(voGrp.getPKGroup());
						}
					}
				}//end if groupID==0
			} else { //particular department, might point more than one department actually
	  			String currentDepartmentName= "";
	  			DepartmentList = QR.getDepartment(QR.getSurveyID(),divID);
	  			//get the current department name
	  			for(int i=0; i<DepartmentList.size(); i++){
	  				voDepartment voDept = (voDepartment) DepartmentList.elementAt(i);
	  				if(voDept.getPKDepartment() == deptID) currentDepartmentName=voDept.getDepartmentName();
	  			}
	  			//get all departmentIDs with the same name as the current department name
	  			for(int i=0; i<DepartmentList.size(); i++){
	  				voDepartment voDept = (voDepartment) DepartmentList.elementAt(i);
	  				if(voDept.getDepartmentName().equals(currentDepartmentName)) deptIDList.add(voDept.getPKDepartment());
	  			}
	  			if(groupID==0){
	  				//get the groupIDs from all the groups
					for(int i = 0; i < deptIDList.size(); i++){
					   for( Object o : QR.getGroup(QR.getSurveyID(), divID, deptIDList.elementAt(i))) groupList.add(o);
					}
					for(int i = 0; i < groupList.size(); i++){
						voGroup voGrp = (voGroup) groupList.elementAt(i);
						groupIDList.add(voGrp.getPKGroup());
					}
	  			} else{
	  				//get the groupIDs from all the groups
					for(int i = 0; i < deptIDList.size(); i++){
					   for( Object o : QR.getGroup(QR.getSurveyID(), divID, deptIDList.elementAt(i))) groupList.add(o);
					}
					String currentGroupName = "";
					//get the name of the current selected group
					for(int i = 0; i < groupList.size(); i ++){
						voGroup voGrp = (voGroup) groupList.elementAt(i);
					   	if(voGrp.getPKGroup() == groupID){
						   currentGroupName = voGrp.getGroupName();
						}
					} 
					//get the groupIDs of all the groups with the same name as the current seleceted one
					for(int i = 0; i < groupList.size(); i ++){
						voGroup voGrp = (voGroup) groupList.elementAt(i);
						if(voGrp.getGroupName().equals(currentGroupName)){
							groupIDList.add(voGrp.getPKGroup());
						}
					}
	  			}//end if groupID==0
			}//end if deptID==0
		} else{ //divison is particular ID
			if(deptID==0){
				deptIDList.add(0);
				if(groupID==0){
					groupIDList.add(0);
				} else{
					String currentGroupName = "";
					groupList = QR.getGroup(QR.getSurveyID(),divID,deptID);
					//get the name of the current selected group
					for(int i = 0; i < groupList.size(); i ++){
						voGroup voGrp = (voGroup) groupList.elementAt(i);
					   	if(voGrp.getPKGroup() == groupID){
						   currentGroupName = voGrp.getGroupName();
						}
					} 
					//get the groupIDs of all the groups with the same name as the current seleceted one
					for(int i = 0; i < groupList.size(); i ++){
						voGroup voGrp = (voGroup) groupList.elementAt(i);
						if(voGrp.getGroupName().equals(currentGroupName)){
							groupIDList.add(voGrp.getPKGroup());
						}
					}
				}
			} else{
				deptIDList.add(deptID);
				groupIDList.add(groupID);
			}
		}
	
	//automatically calculate if not all the raters have been calculated
	// when generating the report
	//Target = s.TargetID(surveyID, divID, deptID, groupID);
	
	for (int j = 0; j < chkSelect.length; j++) {
	
		int targetId = Integer.parseInt(chkSelect[j]);
		if (!s.checkCalculationStatusComplete(targetId, surveyID ,divID, deptIDList, groupIDList))
		{						
			 if (!s.isAllRaterRated(surveyID, groupIDList, targetId))                	 
                 s.CalculateStatus(targetId,surveyID, divID, deptIDList, groupIDList, 1);
             else
                 s.CalculateStatus(targetId,surveyID, divID, deptIDList, groupIDList, 0);						
		}
	}	
	//set the Exclude Group Ranking value 
	ExcelGroup.setExGroupRanking(exGR);
	//Set the selected users
	ExcelGroup.setSelectedUsers(chkSelect);
	ExcelGroup.Report(surveyID, groupIDList, deptIDList, divID, pkUser, file_name, type);
	//Reset selected users
	ExcelGroup.setSelectedUsers(null);
	//Open the file
	String output = Setting.getReport_Path() + "\\" + file_name;
	File f = new File (output);

	//set the content type(can be excel/word/powerpoint etc..)
	response.reset();
	response.setContentType ("application/xls");
	//set the header and also the Name by which user will be prompted to save
	response.addHeader ("Content-Disposition", "attachment;filename=\"GroupReport.xls\"");
		
	//get the file name
	String name = f.getName().substring(f.getName().lastIndexOf("/") + 1,f.getName().length());
	//OPen an input stream to the file and post the file contents thru the 
	//servlet output stream to the client m/c
	InputStream in = new FileInputStream(f);
	ServletOutputStream outs = response.getOutputStream();
	
	int bit = 256;
	int i = 0;

	try {
		while ((bit) >= 0) {
			bit = in.read();
			outs.write(bit);
		}

	} catch (IOException ioe) {
		ioe.printStackTrace(System.out);
	}
	outs.flush();
	outs.close();
	in.close();
}

      out.write(_jsp_string11, 0, _jsp_string11.length);
      out.print((request.getParameter("orgName")));
      out.write(_jsp_string12, 0, _jsp_string12.length);
      out.print((request.getParameter("surveyName")));
      out.write(_jsp_string13, 0, _jsp_string13.length);
      
        	int surveyID = Integer.parseInt(request.getParameter("surveyID"));
        	int divID = Integer.parseInt(request.getParameter("divID"));
        	int deptID = Integer.parseInt(request.getParameter("deptID"));
        	int groupID = Integer.parseInt(request.getParameter("groupID"));
        	Vector DepartmentList = new Vector();
    		Vector groupList = new Vector();
        	Vector<Integer> deptIDList = new Vector<Integer>();
			Vector<Integer> groupIDList = new Vector<Integer>();
		
		if(divID==0){ //division is all, deptID might be pointing more than one
			if(deptID==0){ //department is all, group ID might be pointing more than one
				deptIDList.add(0);
				if(groupID==0){
					groupIDList.add(0);
				} else{
					String currentGroupName = "";
					groupList = QR.getGroup(QR.getSurveyID(),divID,deptID);
					//get the name of the current selected group
					for(int i = 0; i < groupList.size(); i ++){
						voGroup voGrp = (voGroup) groupList.elementAt(i);
					   	if(voGrp.getPKGroup() == groupID){
						   currentGroupName = voGrp.getGroupName();
						}
					} 
					//get the groupIDs of all the groups with the same name as the current seleceted one
					for(int i = 0; i < groupList.size(); i ++){
						voGroup voGrp = (voGroup) groupList.elementAt(i);
						if(voGrp.getGroupName().equals(currentGroupName)){
							groupIDList.add(voGrp.getPKGroup());
						}
					}
				}//end if groupID==0
			} else { //particular department, might point more than one department actually
	  			String currentDepartmentName= "";
	  			DepartmentList = QR.getDepartment(QR.getSurveyID(),divID);
	  			//get the current department name
	  			for(int i=0; i<DepartmentList.size(); i++){
	  				voDepartment voDept = (voDepartment) DepartmentList.elementAt(i);
	  				if(voDept.getPKDepartment() == deptID) currentDepartmentName=voDept.getDepartmentName();
	  			}
	  			//get all departmentIDs with the same name as the current department name
	  			for(int i=0; i<DepartmentList.size(); i++){
	  				voDepartment voDept = (voDepartment) DepartmentList.elementAt(i);
	  				if(voDept.getDepartmentName().equals(currentDepartmentName)) deptIDList.add(voDept.getPKDepartment());
	  			}
	  			if(groupID==0){
	  				//get the groupIDs from all the groups
					for(int i = 0; i < deptIDList.size(); i++){
					   for( Object o : QR.getGroup(QR.getSurveyID(), divID, deptIDList.elementAt(i))) groupList.add(o);
					}
					for(int i = 0; i < groupList.size(); i++){
						voGroup voGrp = (voGroup) groupList.elementAt(i);
						groupIDList.add(voGrp.getPKGroup());
					}
	  			} else{
	  				//get the groupIDs from all the groups
					for(int i = 0; i < deptIDList.size(); i++){
					   for( Object o : QR.getGroup(QR.getSurveyID(), divID, deptIDList.elementAt(i))) groupList.add(o);
					}
					String currentGroupName = "";
					//get the name of the current selected group
					for(int i = 0; i < groupList.size(); i ++){
						voGroup voGrp = (voGroup) groupList.elementAt(i);
					   	if(voGrp.getPKGroup() == groupID){
						   currentGroupName = voGrp.getGroupName();
						}
					} 
					//get the groupIDs of all the groups with the same name as the current seleceted one
					for(int i = 0; i < groupList.size(); i ++){
						voGroup voGrp = (voGroup) groupList.elementAt(i);
						if(voGrp.getGroupName().equals(currentGroupName)){
							groupIDList.add(voGrp.getPKGroup());
						}
					}
	  			}//end if groupID==0
			}//end if deptID==0
		} else{ //divison is particular ID
			if(deptID==0){
				deptIDList.add(0);
				if(groupID==0){
					groupIDList.add(0);
				} else{
					String currentGroupName = "";
					groupList = QR.getGroup(QR.getSurveyID(),divID,deptID);
					//get the name of the current selected group
					for(int i = 0; i < groupList.size(); i ++){
						voGroup voGrp = (voGroup) groupList.elementAt(i);
					   	if(voGrp.getPKGroup() == groupID){
						   currentGroupName = voGrp.getGroupName();
						}
					} 
					//get the groupIDs of all the groups with the same name as the current seleceted one
					for(int i = 0; i < groupList.size(); i ++){
						voGroup voGrp = (voGroup) groupList.elementAt(i);
						if(voGrp.getGroupName().equals(currentGroupName)){
							groupIDList.add(voGrp.getPKGroup());
						}
					}
				}
			} else{
				deptIDList.add(deptID);
				groupIDList.add(groupID);
			}
		}

        	//Get all the targets for the survey
        	SurveyResult sr = new SurveyResult();
        	Vector Target = new Vector();
			Target = sr.TargetID(surveyID, divID, deptIDList, groupIDList);
			
			for (int j = 0; j < Target.size(); j++)
			{
				voUser vo = (voUser)Target.get(j);
				int targetID 		= vo.getTargetLoginID();
				String sGivenName 	= vo.getGivenName();
				String sFamilyName 	= vo.getFamilyName();
				//int iStatus			= vo.getStatus();
				String sFullName 	= sFamilyName + " " + sGivenName;
				
				if(nameSeq == 2)
					sFullName = sGivenName + " " + sFamilyName;
		
      out.write(_jsp_string14, 0, _jsp_string14.length);
      out.print((targetID));
      out.write(_jsp_string15, 0, _jsp_string15.length);
      out.print((sFullName));
      out.write(_jsp_string16, 0, _jsp_string16.length);
      
			}
        
        
      out.write(_jsp_string17, 0, _jsp_string17.length);
    } catch (java.lang.Throwable _jsp_e) {
      pageContext.handlePageException(_jsp_e);
    } finally {
      _jsp_application.getJspApplicationContext().freePageContext(pageContext);
    }
  }

  private java.util.ArrayList _caucho_depends = new java.util.ArrayList();

  public java.util.ArrayList _caucho_getDependList()
  {
    return _caucho_depends;
  }

  public void _caucho_addDepend(com.caucho.vfs.PersistentDependency depend)
  {
    super._caucho_addDepend(depend);
    com.caucho.jsp.JavaPage.addDepend(_caucho_depends, depend);
  }

  public boolean _caucho_isModified()
  {
    if (_caucho_isDead)
      return true;
    if (com.caucho.server.util.CauchoSystem.getVersionId() != 1886798272571451039L)
      return true;
    for (int i = _caucho_depends.size() - 1; i >= 0; i--) {
      com.caucho.vfs.Dependency depend;
      depend = (com.caucho.vfs.Dependency) _caucho_depends.get(i);
      if (depend.isModified())
        return true;
    }
    return false;
  }

  public long _caucho_lastModified()
  {
    return 0;
  }

  public java.util.HashMap<String,java.lang.reflect.Method> _caucho_getFunctionMap()
  {
    return _jsp_functionMap;
  }

  public void init(ServletConfig config)
    throws ServletException
  {
    com.caucho.server.webapp.WebApp webApp
      = (com.caucho.server.webapp.WebApp) config.getServletContext();
    super.init(config);
    com.caucho.jsp.TaglibManager manager = webApp.getJspApplicationContext().getTaglibManager();
    com.caucho.jsp.PageContextImpl pageContext = new com.caucho.jsp.PageContextImpl(webApp, this);
  }

  public void destroy()
  {
      _caucho_isDead = true;
      super.destroy();
  }

  public void init(com.caucho.vfs.Path appDir)
    throws javax.servlet.ServletException
  {
    com.caucho.vfs.Path resinHome = com.caucho.server.util.CauchoSystem.getResinHome();
    com.caucho.vfs.MergePath mergePath = new com.caucho.vfs.MergePath();
    mergePath.addMergePath(appDir);
    mergePath.addMergePath(resinHome);
    com.caucho.loader.DynamicClassLoader loader;
    loader = (com.caucho.loader.DynamicClassLoader) getClass().getClassLoader();
    String resourcePath = loader.getResourcePathSpecificFirst();
    mergePath.addClassPath(resourcePath);
    com.caucho.vfs.Depend depend;
    depend = new com.caucho.vfs.Depend(appDir.lookup("SubgroupReport.jsp"), -1236265178776640510L, false);
    com.caucho.jsp.JavaPage.addDepend(_caucho_depends, depend);
  }

  private final static char []_jsp_string5;
  private final static char []_jsp_string11;
  private final static char []_jsp_string3;
  private final static char []_jsp_string13;
  private final static char []_jsp_string17;
  private final static char []_jsp_string15;
  private final static char []_jsp_string0;
  private final static char []_jsp_string2;
  private final static char []_jsp_string8;
  private final static char []_jsp_string12;
  private final static char []_jsp_string10;
  private final static char []_jsp_string9;
  private final static char []_jsp_string7;
  private final static char []_jsp_string6;
  private final static char []_jsp_string14;
  private final static char []_jsp_string1;
  private final static char []_jsp_string4;
  private final static char []_jsp_string16;
  static {
    _jsp_string5 = "';\r\n	var surveyName = '".toCharArray();
    _jsp_string11 = "\r\n\r\n<form id=\"SubgroupReport\" name=\"SubgroupReport\" method=\"post\" action=\"SubgroupReport.jsp\">\r\n\r\n<table cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\r\n<tr>\r\n    <td colspan=\"2\" width=\"567\">\r\n    	<li><font style='font-family:Arial' size=\"2\">Select the team members to be included in the sub-group.</font></li>\r\n        <li><font style='font-family:Arial' size=\"2\">Provide a name for the sub-group.</font></li>\r\n        <li><font style='font-family:Arial' size=\"2\">Click on Preview to view the sub-group report.</font></li>\r\n    </td>\r\n</tr>\r\n<tr>\r\n	<td colspan=\"2\">&nbsp;</td>\r\n</tr>\r\n<tr>\r\n    <td colspan=\"2\"><font style='font-family:Arial' size=\"2\">Organisation: <b><u>".toCharArray();
    _jsp_string3 = "';\r\n	var exGR = '".toCharArray();
    _jsp_string13 = "</u></b></font></td>\r\n</tr>\r\n<tr>\r\n	<td colspan=\"2\">&nbsp;</td>\r\n</tr>\r\n<tr>\r\n	<td width=\"20%\"><font style='font-family:Arial' size=\"2\"> Sub-group name: </font></td>\r\n    <td width=\"80%\" align=\"left\"><input type=\"text\" id=\"grpName\" name=\"grpName\" ></td>\r\n</tr>\r\n<tr>\r\n	<td colspan=\"2\">&nbsp;</td>\r\n</tr>\r\n<tr>\r\n	<td colspan=\"2\">\r\n    	<div style='width:600px; height:350px; overflow:auto;'>  \r\n		<table id=\"tblUsers\" name=\"tblUsers\" border=\"1\" bgcolor=\"#FFFFCC\" bordercolor=\"#3399FF\">\r\n			<th bgcolor=\"navy\" class=\"sorted-asc\"><font style='font-family:Arial' size=\"2\"><input type=\"checkbox\" id=\"chkAllUsers\" name=\"chkAllUsers\"></font></th>\r\n			<th bgcolor=\"navy\" class=\"sorted-asc\"><a href=\"#\"><b><font style='font-family:Arial;color:white' size=\"2\"><u>Team Members</u></font></b></a></th>\r\n\r\n        ".toCharArray();
    _jsp_string17 = "\r\n		</table>\r\n    </div>\r\n	</td>\r\n</tr>\r\n</table>\r\n<p></p>\r\n<table border=\"0\" width=\"55%\" cellspacing=\"0\" cellpadding=\"0\">\r\n<tr>\r\n   	<td width=\"210\"><input type=\"button\" name=\"Save\" value=\"Preview\" onClick=\"confirmPreview(this.form)\" ></td>\r\n	<td><input type=\"button\" value=\"Save Users\" name=\"btnSaveUsers\" onClick=\"saveUsers(this.form)\"></td>\r\n    <td><input type=\"button\" value=\"Close\" name=\"btnClose\" onClick=\"closeWindow()\"></td>\r\n</tr>\r\n</table>\r\n\r\n</form>\r\n\r\n</body>\r\n</html>".toCharArray();
    _jsp_string15 = "></td>\r\n		            <td width=\"514\"><font style='font-family:Arial' size=\"2\">".toCharArray();
    _jsp_string0 = " \r\n\r\n \r\n\r\n\r\n<html>\r\n<head>\r\n<!--link REL=\"stylesheet\" TYPE=\"text/css\" href=\"..\\Settings\\Settings.css\"-->\r\n\r\n<title>Report for Subgroup</title>\r\n\r\n".toCharArray();
    _jsp_string2 = "\r\n\r\n<script src=\"http://ajax.googleapis.com/ajax/libs/jquery/1.5/jquery.min.js\"></script>\r\n<script> \r\n	$(document).ready(function(){\r\n	   $(\"#chkAllUsers\").click(function(){\r\n		  if (this.checked) {\r\n			$(this).attr('checked', true);\r\n			$('input:checkbox[id^=chkUser]').each(function(){\r\n				$(this).attr('checked', true);\r\n			})\r\n		  } else {\r\n			$(this).attr('checked', false);\r\n			$('input:checkbox[id^=chkUser]').each(function(){\r\n				$(this).attr('checked', false);\r\n			})\r\n		  }\r\n	   });\r\n\r\n	   $('table[id^=tbl]').each(function() {\r\n			var $table = $(this);\r\n			$('th', $table).each(function(column) {\r\n				var $header = $(this);\r\n				$header.click(function() {\r\n				\r\n					var sortDirection = 1;\r\n					if ($header.is('.sorted-asc')) {\r\n						sortDirection = -1;\r\n					}\r\n				\r\n					var rows = $table.find('tbody > tr').nextAll().get();\r\n	\r\n					rows.sort(function(a, b) {\r\n						var keyA = $(a).children('td').eq(column).text().toUpperCase();\r\n						var keyB = $(b).children('td').eq(column).text().toUpperCase();\r\n						if (keyA < keyB) return -sortDirection;\r\n						if (keyA > keyB) return sortDirection;\r\n						return 0;\r\n					});\r\n				\r\n					$.each(rows, function(index, row) {\r\n						$table.children('tbody').append(row);\r\n					});\r\n					\r\n					$table.find('th').removeClass('sorted-asc').removeClass('sorted-desc');\r\n					if (sortDirection == 1) {\r\n						$header.addClass('sorted-asc');\r\n					}\r\n					else {\r\n						$header.addClass('sorted-desc');\r\n					}\r\n				});\r\n			});\r\n		});\r\n	\r\n	})\r\n</script>\r\n\r\n<script language=\"javascript\">\r\n\r\nfunction closeWindow()\r\n{\r\n	window.close();\r\n}\r\n/*\r\nfunction check(field)\r\n{\r\n	var isValid = 0; //No record selected\r\n		\r\n	if( field == null ) {\r\n		isValid = 2;  //No record available\r\n	} else {\r\n		for (i = 0; i < field.length; i++) \r\n			if(field[i].checked) {\r\n				isValid = 1; //At least 1 record is selected\r\n				break;\r\n			}\r\n    }\r\n	\r\n	return isValid;\r\n}\r\n*/\r\nfunction check(field)\r\n{\r\n	var isValid = 0;\r\n	var clickedValue = 0;\r\n		\r\n	if( field == null ) {\r\n		isValid = 2;\r\n	\r\n	} else {\r\n		for (i = 0; i < field.length; i++) \r\n			if(field[i].checked) {		\r\n				clickedValue = field[i].value;\r\n				isValid = 1;\r\n			}\r\n    \r\n		if(isValid == 0 && field != null)  {\r\n			if(field.checked) {\r\n				clickedValue = field.value;\r\n				isValid = 1;\r\n			}\r\n		}\r\n    }\r\n	\r\n	if(isValid == 1)\r\n		return clickedValue;\r\n	else if(isValid == 0)\r\n		return; //alert(\"No record selected\");\r\n	else if(isValid == 2)\r\n		return; //alert(\"No record available\");\r\n	\r\n	isValid = 0;	\r\n	\r\n}\r\nfunction confirmPreview(form)\r\n{\r\n	if(form.grpName.value == \"\"){\r\n		alert(\"Please enter a group name.\");\r\n		return;\r\n	}\r\n	\r\n	var valid = check(form.chkUser);\r\n	if(valid == 0) {\r\n		alert(\"Please select at least 2 users.\");\r\n		return;\r\n	} \r\n	else if (valid == 1) {\r\n		var count = 0;\r\n		for (i = 0; i < (form.chkUser).length; i++) {\r\n			if((form.chkUser)[i].checked) {	\r\n				count++;\r\n			}\r\n		}	\r\n		if(count < 2){\r\n			alert(\"Too few users selected.\");\r\n			return;\r\n		}\r\n	}\r\n	else {\r\n		//alert(\"There are no users to be selected for this survey\");\r\n	}\r\n	\r\n	var grpName = form.grpName.value;\r\n	var type = '".toCharArray();
    _jsp_string8 = "';\r\n    var deptID = '".toCharArray();
    _jsp_string12 = "</u></b>&nbsp;&nbsp; Survey: <b><u>".toCharArray();
    _jsp_string10 = "';\r\n	\r\n	form.action=\"SubgroupReport.jsp?preview=\" + grpName + \"&orgName=\" + orgName + \"&surveyName=\" + surveyName + \"&surveyID=\" + surveyID + \"&divID=\" + divID + \"&deptID=\" + deptID + \"&groupID=\" + groupID + \"&type=\" + type + \"&exGR=\" + exGR;\r\n	form.method=\"post\";\r\n	form.submit();\r\n} \r\n\r\n//This function saves the checkbox users into a cookie\r\nfunction saveUsers(form){\r\n	if(!check(form.chkUser)) {\r\n		eraseCookie(\"users\");\r\n	} else {\r\n		var CurrentCookie = 0; \r\n		for (i = 0; i < (form.chkUser).length; i++) {\r\n			if((form.chkUser)[i].checked) {	\r\n				//Store users in cookies\r\n				CurrentCookie += \",\" + (form.chkUser)[i].value ;\r\n			}\r\n		}	\r\n		createCookie(\"users\",CurrentCookie,\"1\");	\r\n	}\r\n	alert(\"Users saved\");\r\n}\r\n\r\n//This Function Creates your Cookie for you just pass in the Cookie Name, Value, and number of days before you want it to expire.\r\nfunction createCookie(name,value,days)\r\n{\r\n	if (days) {\r\n		var date = new Date();\r\n		date.setTime(date.getTime()+(days*24*60*60*1000));\r\n		var expires = \"; expires=\"+date.toGMTString();\r\n	}\r\n	else var expires = \"\";\r\n	document.cookie = name+\"=\"+value+expires+\"; path=/\";\r\n}\r\n\r\n//This Function reads the value of a given cookie for you.  Just pass in the cookie name and it will return the value.\r\nfunction readCookie(name)\r\n{\r\n	var nameEQ = name + \"=\";\r\n	var ca = document.cookie.split(';');\r\n	for(var i=0;i < ca.length;i++) {\r\n		var c = ca[i];\r\n		while (c.charAt(0)==' ') \r\n			c = c.substring(1,c.length);\r\n		if (c.indexOf(nameEQ) == 0) \r\n			return c.substring(nameEQ.length,c.length);\r\n	}\r\n	return null;\r\n}\r\n\r\n//This Function removes the cookie\r\nfunction eraseCookie(name) {\r\n	createCookie(name,\"\",-1);\r\n}\r\n\r\n//Runs on body load to check history of checkboxes on the page.\r\nfunction checkCookies()\r\n{\r\n	var CurrentCookie = readCookie(\"users\");\r\n	for (i=0; i<document.SubgroupReport.elements.length; i++) {\r\n		if (document.SubgroupReport.elements[i].type == \"checkbox\") {\r\n            if (CurrentCookie && CurrentCookie.indexOf(document.SubgroupReport.elements[i].value) > -1) {\r\n				document.SubgroupReport.elements[i].checked = true;\r\n			}\r\n		}\r\n	}\r\n}\r\n\r\nwindow.onload=checkCookies();\r\n\r\n</script>\r\n\r\n</head>\r\n\r\n<body>\r\n\r\n".toCharArray();
    _jsp_string9 = "';\r\n    var groupID = '".toCharArray();
    _jsp_string7 = "';\r\n    var divID = '".toCharArray();
    _jsp_string6 = "';\r\n	var surveyID = '".toCharArray();
    _jsp_string14 = "	  \r\n		          <tr class=\"row\">\r\n		            <td width=\"34\" align=\"center\"><input type=\"checkbox\" id=\"chkUser\" name=\"chkUser\" value=".toCharArray();
    _jsp_string1 = "\r\n".toCharArray();
    _jsp_string4 = "';\r\n	var orgName = '".toCharArray();
    _jsp_string16 = "</font></td>\r\n		          </tr>\r\n		".toCharArray();
  }
}
