/*
 * JSP generated by Resin Professional 4.0.36 (built Fri, 26 Apr 2013 03:33:09 PDT)
 */

package _jsp._coach;
import javax.servlet.*;
import javax.servlet.jsp.*;
import javax.servlet.http.*;
import java.sql.*;
import java.io.*;
import javazoom.upload.*;
import java.util.*;
import CP_Classes.vo.*;

public class _uploadcoachfile__jsp extends com.caucho.jsp.JavaPage
{
  private static final java.util.HashMap<String,java.lang.reflect.Method> _jsp_functionMap = new java.util.HashMap<String,java.lang.reflect.Method>();
  private boolean _caucho_isDead;
  private boolean _caucho_isNotModified;
  private com.caucho.jsp.PageManager _jsp_pageManager;
  
  public void
  _jspService(javax.servlet.http.HttpServletRequest request,
              javax.servlet.http.HttpServletResponse response)
    throws java.io.IOException, javax.servlet.ServletException
  {
    javax.servlet.http.HttpSession session = request.getSession(true);
    com.caucho.server.webapp.WebApp _jsp_application = _caucho_getApplication();
    com.caucho.jsp.PageContextImpl pageContext = _jsp_pageManager.allocatePageContext(this, _jsp_application, request, response, null, session, 8192, true, false);

    TagState _jsp_state = null;

    try {
      _jspService(request, response, pageContext, _jsp_application, session, _jsp_state);
    } catch (java.lang.Throwable _jsp_e) {
      pageContext.handlePageException(_jsp_e);
    } finally {
      _jsp_pageManager.freePageContext(pageContext);
    }
  }
  
  private void
  _jspService(javax.servlet.http.HttpServletRequest request,
              javax.servlet.http.HttpServletResponse response,
              com.caucho.jsp.PageContextImpl pageContext,
              javax.servlet.ServletContext application,
              javax.servlet.http.HttpSession session,
              TagState _jsp_state)
    throws Throwable
  {
    javax.servlet.jsp.JspWriter out = pageContext.getOut();
    final javax.el.ELContext _jsp_env = pageContext.getELContext();
    javax.servlet.ServletConfig config = getServletConfig();
    javax.servlet.Servlet page = this;
    javax.servlet.jsp.tagext.JspTag _jsp_parent_tag = null;
    com.caucho.jsp.PageContextImpl _jsp_parentContext = pageContext;
    response.setContentType("text/html");
    response.setCharacterEncoding("utf-8");

    out.write(_jsp_string0, 0, _jsp_string0.length);
    javazoom.upload.UploadBean upBean;
    upBean = (javazoom.upload.UploadBean) pageContext.getAttribute("upBean");
    if (upBean == null) {
      upBean = new javazoom.upload.UploadBean();
      pageContext.setAttribute("upBean", upBean);
      out.write(_jsp_string1, 0, _jsp_string1.length);
      {
        java.lang.String _jspParam;
        _jspParam = request.getParameter("folderstore");
        if (_jspParam != null && ! _jspParam.equals(""))
          upBean.setFolderstore(_jspParam);
      }
      out.write(_jsp_string2, 0, _jsp_string2.length);
    }
    out.write(_jsp_string3, 0, _jsp_string3.length);
    CP_Classes.Organization org;
    synchronized (pageContext.getSession()) {
      org = (CP_Classes.Organization) pageContext.getSession().getAttribute("org");
      if (org == null) {
        org = new CP_Classes.Organization();
        pageContext.getSession().setAttribute("org", org);
      }
    }
    out.write(_jsp_string2, 0, _jsp_string2.length);
    CP_Classes.Login logchk;
    synchronized (pageContext.getSession()) {
      logchk = (CP_Classes.Login) pageContext.getSession().getAttribute("logchk");
      if (logchk == null) {
        logchk = new CP_Classes.Login();
        pageContext.getSession().setAttribute("logchk", logchk);
      }
    }
    out.write(_jsp_string4, 0, _jsp_string4.length);
    CP_Classes.Setting setting;
    synchronized (pageContext.getSession()) {
      setting = (CP_Classes.Setting) pageContext.getSession().getAttribute("setting");
      if (setting == null) {
        setting = new CP_Classes.Setting();
        pageContext.getSession().setAttribute("setting", setting);
      }
    }
    out.write(_jsp_string2, 0, _jsp_string2.length);
    Coach.Coach Coach;
    synchronized (pageContext.getSession()) {
      Coach = (Coach.Coach) pageContext.getSession().getAttribute("Coach");
      if (Coach == null) {
        Coach = new Coach.Coach();
        pageContext.getSession().setAttribute("Coach", Coach);
      }
    }
    out.write(_jsp_string2, 0, _jsp_string2.length);
    Coach.LoginStatus LoginStatus;
    synchronized (pageContext.getSession()) {
      LoginStatus = (Coach.LoginStatus) pageContext.getSession().getAttribute("LoginStatus");
      if (LoginStatus == null) {
        LoginStatus = new Coach.LoginStatus();
        pageContext.getSession().setAttribute("LoginStatus", LoginStatus);
      }
    }
    out.write(_jsp_string5, 0, _jsp_string5.length);
    
	int CoachID;
	if(request.getParameter("UploadCoachInfo")!=null){
	CoachID=Integer.parseInt(request.getParameter("UploadCoachInfo"));
	LoginStatus.setSelectedCoach(CoachID);
	}
	else{
	CoachID=LoginStatus.getSelectedCoach();
	}
	voCoach coach=Coach.getSelectedCoach(CoachID);
	String CoachName=coach.getCoachName();

	
	if (MultipartFormDataRequest.isMultipartFormData(request)) {
        // Uses MultipartFormDataRequest to parse the HTTP request.
        MultipartFormDataRequest mrequest = new MultipartFormDataRequest(request);
        String todo = null;
        if (mrequest != null) todo = mrequest.getParameter("todo");
		if ((todo != null) && (todo.equalsIgnoreCase("upload"))) {
                Hashtable files = mrequest.getFiles();
				upBean.setFolderstore(setting.getCoachFilePath());
				upBean.setOverwrite(true);
				
                if ( (files != null) && (!files.isEmpty()) )
                {
                    UploadFile file = (UploadFile) files.get("uploadfile");
                    // Uses the bean now to store specified by jsp:setProperty at the top.

                    if (file != null)
	                {
						String sFile = file.getFileName();
						String sFileCopy = "";
						if(sFile != null)
							sFileCopy = sFile.toLowerCase();
						
						if(sFile != null) {
							if(sFileCopy.indexOf("pdf")!= -1 || sFileCopy.indexOf("doc")!= -1 ) {
								boolean bIsUpdated = Coach.editUploadFile(CoachID,  file.getFileName());
													
								if(bIsUpdated) {

    out.write(_jsp_string6, 0, _jsp_string6.length);
    						
								} 
							
							} else {

    out.write(_jsp_string7, 0, _jsp_string7.length);
    	
							}
						} else {

    out.write(_jsp_string8, 0, _jsp_string8.length);
    							
						}
					}

                    upBean.store(mrequest, "uploadfile");
                }
                else
                {
                  out.println("<li>No uploaded files");
                }
		} else out.println("<BR> todo="+todo);
    }

    out.write(_jsp_string9, 0, _jsp_string9.length);
    out.print((CoachName));
    out.write(_jsp_string10, 0, _jsp_string10.length);
  }

  private com.caucho.make.DependencyContainer _caucho_depends
    = new com.caucho.make.DependencyContainer();

  public java.util.ArrayList<com.caucho.vfs.Dependency> _caucho_getDependList()
  {
    return _caucho_depends.getDependencies();
  }

  public void _caucho_addDepend(com.caucho.vfs.PersistentDependency depend)
  {
    super._caucho_addDepend(depend);
    _caucho_depends.add(depend);
  }

  protected void _caucho_setNeverModified(boolean isNotModified)
  {
    _caucho_isNotModified = true;
  }

  public boolean _caucho_isModified()
  {
    if (_caucho_isDead)
      return true;

    if (_caucho_isNotModified)
      return false;

    if (com.caucho.server.util.CauchoSystem.getVersionId() != -7791540776389363938L)
      return true;

    return _caucho_depends.isModified();
  }

  public long _caucho_lastModified()
  {
    return 0;
  }

  public void destroy()
  {
      _caucho_isDead = true;
      super.destroy();
    TagState tagState;
  }

  public void init(com.caucho.vfs.Path appDir)
    throws javax.servlet.ServletException
  {
    com.caucho.vfs.Path resinHome = com.caucho.server.util.CauchoSystem.getResinHome();
    com.caucho.vfs.MergePath mergePath = new com.caucho.vfs.MergePath();
    mergePath.addMergePath(appDir);
    mergePath.addMergePath(resinHome);
    com.caucho.loader.DynamicClassLoader loader;
    loader = (com.caucho.loader.DynamicClassLoader) getClass().getClassLoader();
    String resourcePath = loader.getResourcePathSpecificFirst();
    mergePath.addClassPath(resourcePath);
    com.caucho.vfs.Depend depend;
    depend = new com.caucho.vfs.Depend(appDir.lookup("Coach/UploadCoachFile.jsp"), 7319492299328479494L, false);
    _caucho_depends.add(depend);
  }

  final static class TagState {

    void release()
    {
    }
  }

  public java.util.HashMap<String,java.lang.reflect.Method> _caucho_getFunctionMap()
  {
    return _jsp_functionMap;
  }

  public void caucho_init(ServletConfig config)
  {
    try {
      com.caucho.server.webapp.WebApp webApp
        = (com.caucho.server.webapp.WebApp) config.getServletContext();
      init(config);
      if (com.caucho.jsp.JspManager.getCheckInterval() >= 0)
        _caucho_depends.setCheckInterval(com.caucho.jsp.JspManager.getCheckInterval());
      _jsp_pageManager = webApp.getJspApplicationContext().getPageManager();
      com.caucho.jsp.TaglibManager manager = webApp.getJspApplicationContext().getTaglibManager();
      com.caucho.jsp.PageContextImpl pageContext = new com.caucho.jsp.InitPageContextImpl(webApp, this);
    } catch (Exception e) {
      throw com.caucho.config.ConfigException.create(e);
    }
  }

  private final static char []_jsp_string1;
  private final static char []_jsp_string7;
  private final static char []_jsp_string0;
  private final static char []_jsp_string9;
  private final static char []_jsp_string6;
  private final static char []_jsp_string10;
  private final static char []_jsp_string5;
  private final static char []_jsp_string4;
  private final static char []_jsp_string2;
  private final static char []_jsp_string8;
  private final static char []_jsp_string3;
  static {
    _jsp_string1 = "\r\n  ".toCharArray();
    _jsp_string7 = "	\r\n							<script>\r\n								alert(\"Format is not supported. Formats suported are .pdf/.doc\");\r\n							</script>\r\n".toCharArray();
    _jsp_string0 = "\r\n				 \r\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n<html>\r\n<head>\r\n<meta http-equiv=\"Content-Type\" content=\"text/html\">\r\n\r\n<style type=\"text/css\">\r\n<!--\r\nbody {\r\n	background-color: #eaebf4;\r\n}\r\n.style3 {color: #000066; font-weight: bold; }\r\n-->\r\n</style>\r\n</head>\r\n\r\n<title>Update Coach info</title>\r\n<meta http-equiv=\"Content-Type\" content=\"text/html\">\r\n\r\n".toCharArray();
    _jsp_string9 = "\r\n\r\n<form method=\"post\" action=\"UploadCoachFile.jsp\" name=\"upform\" enctype=\"multipart/form-data\" onsubmit=\"confirm('Upload File?')\">\r\n<table width=\"392\" border=\"0\" style='font-size:10.0pt;font-family:Arial'>\r\n  <tr>\r\n    <td width=\"97\" align=\"left\"><span class=\"style3\">Coach Name:</span></td>\r\n    <td width=\"285\" align=\"left\"><span class=\"style3\">".toCharArray();
    _jsp_string6 = "\r\n							<script>\r\n								alert(\"Updated successfully\");\r\n								window.close();\r\n								opener.location.href = \"Coach.jsp\";\r\n							</script>\r\n".toCharArray();
    _jsp_string10 = "</span></td>\r\n  </tr>\r\n</table>\r\n<p></p>\r\n<p style='font-size:10.0pt;font-family:Arial'>Please click the browse button and choose the .pdf/.doc file to be imported </p>\r\n<input name=\"uploadfile\" type=\"file\" size=\"50\">\r\n<p></p>\r\n<input type=\"hidden\" name=\"todo\" value=\"upload\">\r\n<input type=\"submit\" name=\"Submit\" value=\"Upload\">\r\n<input type=\"reset\" name=\"Reset\" value=\"Cancel\" onClick=window.close()>\r\n</form>\r\n\r\n</body>\r\n</html>\r\n".toCharArray();
    _jsp_string5 = "\r\n\r\n<body>\r\n\r\n".toCharArray();
    _jsp_string4 = "  \r\n".toCharArray();
    _jsp_string2 = "\r\n".toCharArray();
    _jsp_string8 = "	\r\n							<script>\r\n								alert(\"Please choose a .pdf/.doc file to upload\");\r\n							</script>\r\n".toCharArray();
    _jsp_string3 = "\r\n\r\n".toCharArray();
  }
}
