package CP_Classes;

import java.sql.*;
import java.util.Vector;

import CP_Classes.common.ConnectionBean;
import CP_Classes.vo.votblDRA;

/**
 * This class implements all the operations for Development Activities, which is to be used in System Libraries, Survey, and Report..
 */
public class DevelopmentActivities
{
	/**
	 * Declaration of new object of class Database. This object is declared private, which is to make sure that it is only accessible within this class Competency.
	 */
	//private Database db;
	
	/**
	 * Declaration of new object of class User.
	 */
	private User_Jenty U;
	
	/**
	 * Declaration of new object of class EventViewer.
	 */
	private EventViewer EV;
	
	/**
	 * Bean Variable to store the foreign key of Competency ID.
	 */
	public int FKCom;
	
	/**
	 * Bean Variable to store the primary key of DRA for editing purpose.
	 */
	public int DRAID;
	
	/**
	 * Bean Variable for sorting purposes. Total Array depends on total SortType.
	 * 0 = ASC
	 * 1 = DESC
	 */
	public int Toggle [];	// 0=asc, 1=desc
	
	/**
	 * Bean Variable to store the Sorting type.
	 */
	public int SortType;

	/**
	 * Creates a new intance of Development Activities object.
	 */
	public DevelopmentActivities() {
		//db = new Database();
		U = new User_Jenty();
		EV = new EventViewer();
		
		Toggle = new int [2];
		
		for(int i=0; i<2; i++)
			Toggle[i] = 0;
		
		SortType = 1;
		FKCom = 0;
	}

	/**
	 * Store Bean Variable toggle either 1 or 0.
	 */
	public void setToggle(int toggle) {
		Toggle[SortType - 1] = toggle;
	}

	/**
	 * Get Bean Variable toggle.
	 */
	public int getToggle() {
		return Toggle [SortType - 1];
	}	
	
	/**
	 * Store Bean Variable Sort Type.
	 */
	public void setSortType(int SortType) {
		this.SortType = SortType;
	}

	/**
	 * Get Bean Variable SortType.
	 */
	public int getSortType() {
		return SortType;
	}	

	/**
	 * Store Bean Variable foreign key Competency ID.
	 */
	public void setFKCom(int FKCom) {
		this.FKCom = FKCom;
	}

	/**
	 * Get Bean Variable foreign key Competency ID.
	 */
	public int getFKCom() {
		return FKCom;
	}
	
	/**
	 * Store Bean Variable DRAID.
	 */
	public void setDRAID(int DRAID) {
		this.DRAID = DRAID;
	}

	/**
	 * Get Bean Variable DRAID.
	 */
	public int getDRAID() {
		return DRAID;
	}


	/**
	 * Add a new record to the tblDRA table.
	 *
	 * Parameters:
	 *		CompetencyID - the foreign key of CompetencyID that this DRA belongs.
	 *		DRAStatement - the statement of the DRA.
	 *		companyID	 - the foreign key of companyID
	 *		orgID		 - the foreign key of organizationID
	 *
	 * Returns:
	 *		a boolean that represents the success of inserting to the database.
	 */
	//Added parameter sIsSystemGenerated and related logic codes. To determine if the Develpment Activities to be added is system generated or user generated, Sebastian 29 July 2010
	public boolean addRecord(int CompetencyID, String DRAStatement, String IsSystemGenerated, int companyID, int orgID, int pkUser, int userType) throws SQLException, Exception {
		int IsSysGenerated = 0;
		boolean bIsAdded=false;
		Connection con = null;
		Statement st = null;


		//if(companyID == 1 && orgID == 1)
		//Modified Code to cater to IsSystemGenerated parameter, only sa is allowed to specify if the record is system or user generated, Sebastian 29 July 2010
		if(userType == 1)//if user is sa
		{
			if (IsSystemGenerated.trim().equals("1"))
			{
				IsSysGenerated = 1;
			}
		}
		
		String sql = "Insert into tblDRA (CompetencyID, DRAStatement, IsSystemGenerated, FKCompanyID, FKOrganizationID) values (";
		//added "N" in front of dra statement by alvis on 08-Sep-09 to allow chinese support
		sql = sql + CompetencyID + ",N'" + DRAStatement + "'," + IsSysGenerated + ", " + companyID + ", " + orgID + ")";
		try{
			con=ConnectionBean.getConnection();
			st=con.createStatement();
			int iSuccess=st.executeUpdate(sql);
			
			if(iSuccess!=0)
			bIsAdded=true;

		}catch(Exception ex){
			System.out.println("DevelopmentActivities.java- " +ex.getMessage());
		}finally{
			ConnectionBean.closeStmt(st); //Close statement
			ConnectionBean.close(con); //Close connection
		}
		
		
		String [] UserInfo = U.getUserDetail(pkUser);		
		try{
			EV.addRecord("Insert", "Development Activities", DRAStatement, UserInfo[2], UserInfo[11], UserInfo[10]);
		} catch(SQLException SE) {
			System.out.println(SE.getMessage());
		}
			
		return bIsAdded;
	}

	/**
	 * Edit a record in the Development Activities table (tblDRA).
	 *
	 * Parameters:
	 *		CompetencyID - the foreign key of Competency to determine which record to be edited.
	 *		DRAID		 - the primary key of DRA to be edited.
	 *		DRAStatement - the DRA statement.
	 *
	 * Returns:
	 *		a boolean that represents the success of editing to the database.
	 */
	public boolean editRecord(int CompetencyID, int DRAID, String DRAStatement, int pkUser) throws SQLException, Exception  {
		String oldStatement = DRAStatement(DRAID);
		Connection con = null;
		Statement st = null;
		boolean bIsUpdated=false;
		//added "N" in front of dra statement by alvis on 08-Sep-09 to allow chinese support
		String sql = "Update tblDRA Set DRAStatement = N'" + DRAStatement +	"', CompetencyID = " + CompetencyID + " where DRAID = " + DRAID;
		
		try{
			con=ConnectionBean.getConnection();
			st=con.createStatement();
			int iSuccess = st.executeUpdate(sql);
			
			if(iSuccess!=0)
			bIsUpdated=true;

		}catch(Exception e){
			System.out.println(e.getMessage());
		}finally{
			ConnectionBean.closeStmt(st); //Close statement
			ConnectionBean.close(con); //Close connection
		}
						
		String [] UserInfo = U.getUserDetail(pkUser);		
		try {
			EV.addRecord("Update", "Development Activities", "(" + oldStatement + ") - (" + DRAStatement + ")", UserInfo[2], UserInfo[11], UserInfo[10]);
		} catch(SQLException SE) {
			System.out.println(SE.getMessage());
		}
	
		return bIsUpdated;
	}

	/**
	 * Delete an existing record from the Development Activities table (tblDRA).
	 *
	 * Parameters:
	 *		DRAID - the primary key of DRA to determine which record to be deleted.
	 *
	 * Returns:
	 *		a boolean that represents the success of deletion process.
	 */
	public boolean deleteRecord(int DRAID, int pkUser)  throws SQLException, Exception {
		String oldStatement = DRAStatement(DRAID);
		boolean bIsDeleted=false;
		Connection con = null;
		Statement st = null;

		String sql = "Delete from tblDRA where DRAID = " + DRAID;
		try{
			con=ConnectionBean.getConnection();
			st=con.createStatement();
			int iSuccess = st.executeUpdate(sql);
			
			if(iSuccess!=0)
			bIsDeleted=true;
		}catch(Exception e){
			System.out.println(e.getMessage());
		}finally{
			ConnectionBean.closeStmt(st); //Close statement
			ConnectionBean.close(con); //Close connection
		}
				
				
		String [] UserInfo = U.getUserDetail(pkUser);		
		try {
			EV.addRecord("Delete", "Development Activities", oldStatement, UserInfo[2], UserInfo[11], UserInfo[10]);
		} catch(SQLException SE) {
			System.out.println(SE.getMessage());
		}

		return bIsDeleted;
	}
	
	/**
	 * Retrieves all Development Activities from tblDRA order by DRAStatement.
	 */
	public Vector getAllRecord() throws SQLException, Exception {
		String query = "Select * from tblDRA order by DRAStatement";
		Vector v=new Vector();
		/*
		db.openDB();
		Statement stmt = db.con.createStatement();
		ResultSet rs = stmt.executeQuery(query);
			*/
		Connection con = null;
		Statement st = null;
		ResultSet rs = null;

		try{
			con=ConnectionBean.getConnection();
			st=con.createStatement();
			rs=st.executeQuery(query);
			while(rs.next()){
				votblDRA vo=new votblDRA();
				vo.setCompetencyID(rs.getInt("CompetencyID"));
				vo.setDRACounter(rs.getInt("DRACounter"));
				vo.setDRAID(rs.getInt("DRAID"));
				vo.setDRAStatement(rs.getString("DRAStatement"));
				vo.setFKCompanyID(rs.getInt("FKCompanyID"));
				vo.setFKOrganizationID(rs.getInt("FKOrganizationID"));
				vo.setIsSystemGenerated(rs.getInt("IsSystemGenerated"));
				
				v.add(vo);
				
			}
			
		}catch(Exception e){
			System.out.println("DevelpmentActivities.java - getAllRecord - "+e);
		}finally{
			ConnectionBean.closeRset(rs); //Close ResultSet
			ConnectionBean.closeStmt(st); //Close statement
			ConnectionBean.close(con); //Close connection

		}
		return v;
	}

	/**
	 * Retrieves the scale ID based on company ID, organization ID, and scale Description.
	 */
	public int ScaleID(int companyID, int orgID, String scaleDesc) throws SQLException, Exception {
		String query = "SELECT ScaleID from tblScale where ScaleDescription = '" + scaleDesc + "' and ";
		query = query + "FKCompanyID = " + companyID + " and FKOrganizationID = " + orgID;
		int ScaleID=0;
		/*
		db.openDB();
		Statement stmt = db.con.createStatement();
		ResultSet rs = stmt.executeQuery(query);
		*/
		Connection con = null;
		Statement st = null;
		ResultSet rs = null;

		try{
			con=ConnectionBean.getConnection();
			st=con.createStatement();
			rs=st.executeQuery(query);
		
			if(rs.next())
				ScaleID= rs.getInt(1);
			
		}catch(Exception e){
			System.out.println("DevelpmentActivities.java - ScaleID - "+e);
		}finally{
			ConnectionBean.closeRset(rs); //Close ResultSet
			ConnectionBean.closeStmt(st); //Close statement
			ConnectionBean.close(con); //Close connection

		}
		

		return ScaleID;
	}
	
	/**
	 * Retrieves all records based on Competency ID, company ID, and organizationID.
	 *
	 * Parameters:
	 *		FKComp - optional.
	 */
	public Vector FilterRecord(int FKComp, int companyID, int orgID) throws SQLException, Exception {
		String query = "";
		Vector v=new Vector();
		if(FKComp != 0) {
			query = query + "Select DRAID, CompetencyID, DRAStatement, Description from tblDRA ";
			query = query + " inner join tblOrigin on tblDRA.IsSystemGenerated = tblOrigin.PKIsSystemGenerated ";
			query = query + "where (CompetencyID = " + FKComp;
			query = query + " and FKCompanyID = " + companyID + " and FKOrganizationID = " + orgID;
			query = query + ") or (CompetencyID = " + FKComp + " and IsSystemGenerated = 1) order by ";
		} else {
			query = query + "Select DRAID, CompetencyID, DRAStatement, Description from tblDRA ";
			query = query + " inner join tblOrigin on tblDRA.IsSystemGenerated = tblOrigin.PKIsSystemGenerated ";
			query = query + "where (FKCompanyID = " + companyID + " and FKOrganizationID = " + orgID;
			query = query + ") or (IsSystemGenerated = 1) order by ";			
		}
		
		if(SortType == 1)
			query = query + "DRAStatement";
		else
			query = query + "IsSystemGenerated";

		if(Toggle[SortType - 1] == 1)
			query = query + " DESC";
			
		
		Connection con = null;
		Statement st = null;
		ResultSet rs = null;

		try{
			con=ConnectionBean.getConnection();
			st=con.createStatement();
			rs=st.executeQuery(query);
		
			while(rs.next()){
			//DRAID, CompetencyID, DRAStatement, Description
				votblDRA vo=new votblDRA();
				vo.setDRAID(rs.getInt("DRAID"));
				vo.setCompetencyID(rs.getInt("CompetencyID"));
				vo.setDRAStatement(rs.getString("DRAStatement"));
				vo.setDescription(rs.getString("Description"));
				v.add(vo);
			}
			
		}catch(Exception e){
			System.out.println("DevelpmentActivities.java -  FilterRecord - "+e);
		}finally{
			ConnectionBean.closeRset(rs); //Close ResultSet
			ConnectionBean.closeStmt(st); //Close statement
			ConnectionBean.close(con); //Close connection

		}
		
		
			
		return v;
	}
	
	/** (13-01-05) Maruli
	 *	For Import DRA purpose
	 *	Check whether DRA Statement already exist in database
	 *
	 *	Parameters:
	 *		- CompetencyID
	 *		- DRA Statement
	 *		- CompanyID
	 *		- OrganisationID
	 *
	 *	Return:
	 *		- DRA ID
	 */
	public int getDRAID(int CompID, String DRAstmt, int CompanyID, int OrgID) throws SQLException, Exception {
		int draID = 0;
		
		String query = "SELECT DRAID FROM tblDRA WHERE (CompetencyID = " + CompID + ") AND ";
		query = query + "(FKCompanyID = " + CompanyID + ") AND (FKOrganizationID = " + OrgID + ") AND";
		query = query + "(DRAStatement = '" + DRAstmt + "')";
		/*
		db.openDB();
		
		Statement stmt = db.con.createStatement();
		ResultSet rs = stmt.executeQuery(query);
		*/
		Connection con = null;
		Statement st = null;
		ResultSet rs = null;

		try{
			con=ConnectionBean.getConnection();
			st=con.createStatement();
			rs=st.executeQuery(query);
		
			if (rs.next())
				draID = rs.getInt("DRAID");
		}catch(Exception e){
			System.out.println("DevelpmentActivities.java -  getDRAID - "+e);
		}finally{
			ConnectionBean.closeRset(rs); //Close ResultSet
			ConnectionBean.closeStmt(st); //Close statement
			ConnectionBean.close(con); //Close connection

		}
		
		
		
		return draID;
	}
	
	/** (13-01-04) Maruli
	 *	For Import DRA purpose
	 *	Add records from excel sheet into database (Sheet 1)
	 */
	public boolean importRecord(int CompetencyID, String DRAStatement, int companyID, int orgID) throws SQLException, Exception {
		Connection con = null;
		Statement st = null;
		boolean bIsUpdated=false;
		try{
			int IsSysGenerated = 0;
		
			String sql = "Insert into tblDRA (CompetencyID, DRAStatement, IsSystemGenerated, FKCompanyID, FKOrganizationID) values (";
			//added "N" in front of dra statement by alvis on 08-Sep-09 to allow chinese support
			sql = sql + CompetencyID + ",N'" + DRAStatement + "'," + IsSysGenerated + ", " + companyID + ", " + orgID + ")";
			con=ConnectionBean.getConnection();
			st=con.createStatement();
			int iSuccess = st.executeUpdate(sql);
			
			if(iSuccess!=0)
			bIsUpdated=true;

		
		} catch(SQLException SE) {
			System.out.println(SE.getMessage());
		}finally{

		ConnectionBean.closeStmt(st); //Close statement
		ConnectionBean.close(con); //Close connection
		}
		
		return bIsUpdated;	
	}
	
	/** (31-01-04) Maruli
	 *	For Import DRA purpose
	 *	Delete records from database based on data in excel sheet (Sheet 2)
	 */
	public boolean importDeleteRecord(int CompetencyID, String DRAStatement, int companyID, int orgID) throws SQLException, Exception {
		Connection con = null;
		Statement st = null;
		boolean bIsUpdated=false;
		try{
			String sql = "Delete FROM tblDRA WHERE CompetencyID = " + CompetencyID + " AND DRAStatement = '" + DRAStatement + "' ";
			sql = sql + " AND FKCompanyID = " + companyID + " AND FKOrganizationID = " + orgID + " ";
			con=ConnectionBean.getConnection();
			st=con.createStatement();
			int iSuccess = st.executeUpdate(sql);
			
			if(iSuccess!=0)
			bIsUpdated=true;
		
		} catch(SQLException SE) {
			System.out.println(SE.getMessage());
		}
		finally{

			ConnectionBean.closeStmt(st); //Close statement
			ConnectionBean.close(con); //Close connection
			}
			
			return bIsUpdated;	
	}
	
	/**
	 * Get the total records in Development Activities table.
	 */
	public int getTotalRecord() throws SQLException, Exception {
		String query = "Select count(*) tblDRA";
		Connection con = null;
		Statement st = null;
		ResultSet rs = null;
		int record=0;
		try{
			con=ConnectionBean.getConnection();
			st=con.createStatement();
			rs=st.executeQuery(query);
			
			if(rs.next())
				record= rs.getInt(1);
		}catch(Exception e){
			System.out.println("DevelpmentActivities.java -  etTotalRecord - "+e);
		}finally{
			ConnectionBean.closeRset(rs); //Close ResultSet
			ConnectionBean.closeStmt(st); //Close statement
			ConnectionBean.close(con); //Close connection

		}
		
		

		return record;
	}
	
	/**
	 * Check the existance of the particular Competency in the database.
	 * Returns: 0 = NOT Exist
	 *		    1 = Exist
	 */
	public int CheckCompetencyExist(int pkComp) throws SQLException, Exception {
		int exist = 0;
		
		String query = "Select * from tblDRA where CompetencyID = " + pkComp;
		Connection con = null;
		Statement st = null;
		ResultSet rs = null;
		
		try{
			con=ConnectionBean.getConnection();
			st=con.createStatement();
			rs=st.executeQuery(query);
			
			if(rs.next())
				exist = 1;
			
		}catch(Exception e){
			System.out.println("DevelpmentActivities.java -  CheckCompetencyExist - "+e);
		}finally{
			ConnectionBean.closeRset(rs); //Close ResultSet
			ConnectionBean.closeStmt(st); //Close statement
			ConnectionBean.close(con); //Close connection

		}
		
		

		return exist;
	}
	
	/**
	 * Check the existance of the particular DRA in the database.
	 * Returns: 0 = NOT Exist
	 *		    if exist, return the ID of the DRA changed by Ha 11/06/08
	 */
	public int CheckDRAExist(int CompID, String DRA, int companyID, int orgID) throws SQLException, Exception {
		int pkComp = 0;

		String query = "SELECT DRAID FROM tblDRA WHERE CompetencyID = " + CompID + " AND ";
		query = query + "DRAStatement = '" + DRA + "' and ((FKCompanyID = " + companyID + " and FKOrganizationID = " + orgID;
		query = query + ") or (IsSystemGenerated = 1))";
		Connection con = null;
		Statement st = null;
		ResultSet rs = null;
		try{
			con=ConnectionBean.getConnection();
			st=con.createStatement();
			rs=st.executeQuery(query);
			
			if(rs.next())
				pkComp = rs.getInt("DRAID");
			
		}catch(Exception e){
			System.out.println("DevelpmentActivities.java -  CheckDRAExist - "+e);
		}finally{
			ConnectionBean.closeRset(rs); //Close ResultSet
			ConnectionBean.closeStmt(st); //Close statement
			ConnectionBean.close(con); //Close connection

		}
		
	
			
		return pkComp;
	}
	
	/**
	 * Check whether the DRA belonged to System Generated of User Generated.
	 */
	public int CheckSysLibDRA(int DRAID) throws SQLException, Exception {
		int pkDRA = 0;

		String query = "SELECT IsSystemGenerated FROM tblDRA  ";
		query = query + "WHERE DRAID = " + DRAID;

		Connection con = null;
		Statement st = null;
		ResultSet rs = null;
		try{
			con=ConnectionBean.getConnection();
			st=con.createStatement();
			rs=st.executeQuery(query);
			
			if(rs.next())
				pkDRA = rs.getInt(1);
				
			
		}catch(Exception e){
			System.out.println("DevelpmentActivities.java -  CheckSysLibDRA - "+e);
		}finally{
			ConnectionBean.closeRset(rs); //Close ResultSet
			ConnectionBean.closeStmt(st); //Close statement
			ConnectionBean.close(con); //Close connection

		}
		
		return pkDRA;
	}	
	
	
	/**
	 * Retrieve all the Development Activities under the particular Competency.
	 */
	public Vector getRecord(int pkComp, int compID, int orgID) throws SQLException, Exception {
		String query = "SELECT * from tblDRA where (CompetencyID = " + pkComp;
		query = query + " and IsSystemGenerated = 1)";
		query = query + " or (CompetencyID = " + pkComp + " and FKCompanyID = " + compID;
		query = query + " and FKOrganizationID = " + orgID + ")";
		
		Vector v=new Vector();
		/*
		db.openDB();
		Statement stmt = db.con.createStatement();
		ResultSet rs = stmt.executeQuery(query);
			*/
		Connection con = null;
		Statement st = null;
		ResultSet rs = null;

		try{
			con=ConnectionBean.getConnection();
			st=con.createStatement();
			rs=st.executeQuery(query);
			while(rs.next()){
				votblDRA vo=new votblDRA();
				vo.setCompetencyID(rs.getInt("CompetencyID"));
				vo.setDRACounter(rs.getInt("DRACounter"));
				vo.setDRAID(rs.getInt("DRAID"));
				vo.setDRAStatement(rs.getString("DRAStatement"));
				vo.setFKCompanyID(rs.getInt("FKCompanyID"));
				vo.setFKOrganizationID(rs.getInt("FKOrganizationID"));
				vo.setIsSystemGenerated(rs.getInt("IsSystemGenerated"));
				
				v.add(vo);
				
			}
			
		}catch(Exception e){
			System.out.println("DevelpmentActivities.java - getRecord - "+e);
		}finally{
			ConnectionBean.closeRset(rs); //Close ResultSet
			ConnectionBean.closeStmt(st); //Close statement
			ConnectionBean.close(con); //Close connection

		}
		return v;
	}
	
	/**
	 * Get the Development Activities Statement description based on DRA ID.
	 */
	public String DRAStatement(int DRAID) throws SQLException, Exception {
		String desc = "";
		
		String query = "SELECT * from tblDRA where DRAID = " + DRAID;
		
		Connection con = null;
		Statement st = null;
		ResultSet rs = null;
		try{
			con=ConnectionBean.getConnection();
			st=con.createStatement();
			rs=st.executeQuery(query);
			
			if(rs.next())
				desc = rs.getString("DRAStatement");
				
			
		}catch(Exception e){
			System.out.println("DevelpmentActivities.java -  DRAStatement - "+e);
		}finally{
			ConnectionBean.closeRset(rs); //Close ResultSet
			ConnectionBean.closeStmt(st); //Close statement
			ConnectionBean.close(con); //Close connection

		}
		
			
		return desc;
	}	
	
	
	public votblDRA getDRA(int iPkDRA) throws SQLException, Exception {
		String query = "Select * from tblDRA where DRAID = " + iPkDRA;
		votblDRA vo=new votblDRA();
		/*
		db.openDB();
		Statement stmt = db.con.createStatement();
		ResultSet rs = stmt.executeQuery(query);
			*/
		Connection con = null;
		Statement st = null;
		ResultSet rs = null;

		try{
			con=ConnectionBean.getConnection();
			st=con.createStatement();
			rs=st.executeQuery(query);
			if(rs.next()){
			
				vo.setDRAStatement(rs.getString("DRAStatement"));
				vo.setFKCompanyID(rs.getInt("FKCompanyID"));
				vo.setCompetencyID(rs.getInt("CompetencyID"));
			}
			
		}catch(Exception e){
			System.out.println("DevelpmentActivities.java - getDRA - "+e);
		}finally{
			ConnectionBean.closeRset(rs); //Close ResultSet
			ConnectionBean.closeStmt(st); //Close statement
			ConnectionBean.close(con); //Close connection

		}
		return vo;
	}
	
	public Vector getDevelopmentActivities(int iFKCompetency, int iTargetLoginID) {
		Vector v = new Vector();	
		
		Connection con = null;
		Statement st = null;
		ResultSet rs = null;
		
		
		try {
			String sql = "SELECT * FROM tblDRA WHERE CompetencyID = "+iFKCompetency;
			
			sql += " AND DRAID NOT IN (Select DRAID From tblDevelopmentPlan WHERE TargetLoginID = "+iTargetLoginID+") ORDER BY DRAStatement";
			
			con=ConnectionBean.getConnection();
        	st=con.createStatement();
        	rs=st.executeQuery(sql);
			
			while(rs.next())	
			{	
				String Activity = rs.getString("DRAStatement");
				String PKActivity = rs.getString("DRAID");
				String [] arr = {PKActivity, Activity};
				v.add(arr);
			}
			
		} catch(Exception E) 
        {
            System.err.println("DevelopmentActivities.java - getDevelopmentActivities - " + E);
        }
        finally
        {
	        ConnectionBean.closeRset(rs); //Close ResultSet
	        ConnectionBean.closeStmt(st); //Close statement
	        ConnectionBean.close(con); //Close connection
        }
				
		
		return v;
	}
		
}